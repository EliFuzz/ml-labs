"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[8010],{11998:(e,n,t)=>{t.d(n,{A:()=>a});t(59729);var i=t(13526);const s={tabItem:"tabItem_JZCZ"};var r=t(65813);function a({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,t),hidden:n,children:e})}},20508:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var i=t(59729);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},34204:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(59729),s=t(13526),r=t(7267),a=t(25470),d=t(96177),l=t(63188),c=t(22301),o=t(47714);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function x({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=u(e),[a,l]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,h]=m({queryString:t,groupId:s}),[j,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,o.Dv)(n);return[t,(0,i.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),g=(()=>{const e=c??j;return x({value:e,tabValues:r})?e:null})();(0,d.A)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!x({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),p(e)}),[h,p,r]),tabValues:r}}var p=t(83891);const g={tabList:"tabList_Mt30",tabItem:"tabItem_dm4R"};var y=t(65813);function f({className:e,block:n,selectedValue:t,selectValue:i,tabValues:a}){const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,s=d.indexOf(n),r=a[s].value;r!==t&&(l(n),i(r))},o=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:i})=>(0,y.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{d.push(e)},onKeyDown:o,onClick:c,...i,className:(0,s.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=j(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,y.jsx)(f,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function w(e){const n=(0,p.A)();return(0,y.jsx)(v,{...e,children:h(e.children)},String(n))}},48254:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/fine-grained-fully-federated-mesh-a2b0bd9a3d6435fa9b0af57f8b57bd0e.svg"},51366:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/coarse-grained-aligned-mesh-d12a8b4fbd1eadeeade9eeb7488b4734.svg"},51583:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/value-chain-aligned-mesh-f55411445c6bdf26a39758ed458965c2.svg"},57008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"education/Data-Engineering/fundamentals","title":"Fundamentals","description":"Fundamental concepts in data engineering, including databases, data storage solutions, and data processing techniques.","source":"@site/docs/education/05-Data-Engineering/03-fundamentals.mdx","sourceDirName":"education/05-Data-Engineering","slug":"/education/Data-Engineering/fundamentals","permalink":"/ml-labs/docs/education/Data-Engineering/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/ml-labs/docs/education/05-Data-Engineering/03-fundamentals.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Fundamentals","description":"Fundamental concepts in data engineering, including databases, data storage solutions, and data processing techniques.","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Fundamentals","permalink":"/ml-labs/docs/education/Machine-Learning/fundamentals"},"next":{"title":"Data Analysis","permalink":"/ml-labs/docs/category/data-analysis"}}');var s=t(65813),r=t(20508),a=t(11998),d=t(34204);const l={title:"Fundamentals",description:"Fundamental concepts in data engineering, including databases, data storage solutions, and data processing techniques.",hide_table_of_contents:!0},c=void 0,o={},h=[{value:"Stages",id:"stages",level:2},{value:"Bounded vs. Unbounded Data",id:"bounded-vs-unbounded-data",level:2},{value:"Batch vs. Micro-Batch vs. Real-Time Processing",id:"batch-vs-micro-batch-vs-real-time-processing",level:2},{value:"Pull vs. Push",id:"pull-vs-push",level:2},{value:"Schema Types",id:"schema-types",level:2},{value:"Star vs. Snowflake vs. Galaxy Schema",id:"star-vs-snowflake-vs-galaxy-schema",level:2},{value:"Lambda vs. Kappa",id:"lambda-vs-kappa",level:2},{value:"Importance",id:"importance",level:3},{value:"Guidelines",id:"guidelines",level:3},{value:"Testing and Validation",id:"testing-and-validation",level:3},{value:"Validation Techniques",id:"validation-techniques",level:3},{value:"Evolution of Authentication Methods",id:"evolution-of-authentication-methods",level:2},{value:"Credentials (Base64)",id:"credentials-base64",level:2},{value:"JSON Web Token (JWT)",id:"json-web-token-jwt",level:2},{value:"Oauth 2.0",id:"oauth-20",level:2},{value:"SSH Keys",id:"ssh-keys",level:2},{value:"SSL Certificates",id:"ssl-certificates",level:2},{value:"2FA (Two-Factor Authentication)",id:"2fa-two-factor-authentication",level:2},{value:"2SA (Two-Step Authentication)",id:"2sa-two-step-authentication",level:2},{value:"Core Principles",id:"core-principles",level:2},{value:"Data Mesh Architecture",id:"data-mesh-architecture",level:2},{value:"Data Product",id:"data-product",level:2},{value:"High-level Platform Design and Governance",id:"high-level-platform-design-and-governance",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(d.A,{queryString:"primary",children:[(0,s.jsxs)(a.A,{value:"de-lifecycle",label:"DE Lifecycle",children:[(0,s.jsxs)(n.p,{children:["DE Lifecycle describes the stages involved in taking raw data from its origin to a usable format for analytics, reporting, and machine learning. The typical stages are ",(0,s.jsx)(n.strong,{children:"Generation"}),", where data is created; ",(0,s.jsx)(n.strong,{children:"Storage"}),", where it's held; ",(0,s.jsx)(n.strong,{children:"Ingestion"}),", where it's brought into a system; ",(0,s.jsx)(n.strong,{children:"Transformation"}),", where it's cleaned and processed; and ",(0,s.jsx)(n.strong,{children:"Serving"}),", where it's made available to users and applications. This structured process ensures the consistent delivery of high-quality data products and helps data engineers build reliable data pipelines."]}),(0,s.jsx)(n.mermaid,{value:'flowchart LR\n  subgraph Generation\n    direction LR\n\n    A[Data Sources] e1@--\x3e|APIs| B[Applications]\n    A e2@--\x3e|Sensors| C[IoT Devices]\n    A e3@--\x3e|Queries| D[Databases]\n    A e4@--\x3e|Files| E[File Systems]\n    A e5@--\x3e|Web Scraping| F[Web Services]\n  end\n\n  B e6@--\x3e DP\n  C e7@--\x3e DP\n  D e8@--\x3e DP\n  E e9@--\x3e DP\n  F e10@--\x3e DP\n\n  subgraph DP ["Data Platform"]\n    direction LR\n    subgraph " "\n      direction LR\n      ingest["Ingestion"]:::ingest e11@--\x3e transform["Transformation"]:::transform e12@--\x3e serve["Serving"]:::serve\n    end\n    storage["Storage"]:::storage\n    ingest e13@--\x3e storage\n    transform e14@--\x3e storage\n    serve e15@--\x3e storage\n  end\n\n  DP e16@--\x3e analytics["Analytics"]:::output\n  DP e17@--\x3e ml["Machine Learning"]:::output\n  DP e18@--\x3e rETL["Reverse ETL"]:::output\n\n  subgraph Undercurrents\n    direction TB\n    sec["Security"]:::uc_sec\n    dm["Data management"]:::uc_dm\n    dops["DataOps"]:::uc_dops\n    darch["Data architecture"]:::uc_darch\n    orch["Orchestration"]:::uc_orch\n    se["Software engineering"]:::uc_se\n  end\n\n  classDef gen fill:#f7c6c6,stroke:#333,stroke-width:1px;\n  classDef ingest fill:#1fbf90,stroke:#0f5a3f,stroke-width:1px,color:#fff;\n  classDef transform fill:#b56ce6,stroke:#5a2e6a,stroke-width:1px,color:#fff;\n  classDef serve fill:#2f86d6,stroke:#113f6c,stroke-width:1px,color:#fff;\n  classDef storage fill:#d9d9d9,stroke:#8c8c8c,stroke-width:1px;\n  classDef output fill:#f6df6b,stroke:#8f7a2a,stroke-width:1px;\n  classDef uc_sec fill:#e7c8f4,stroke:#9b6aa5,stroke-width:1px;\n  classDef uc_dm fill:#d8eef8,stroke:#6fa6bf,stroke-width:1px;\n  classDef uc_dops fill:#f6f1d8,stroke:#a58f56,stroke-width:1px;\n  classDef uc_darch fill:#c8efd8,stroke:#4f9a6e,stroke-width:1px;\n  classDef uc_orch fill:#f7d0d0,stroke:#9b5a5a,stroke-width:1px;\n  classDef uc_se fill:#f5ead4,stroke:#9b8f6a,stroke-width:1px;\n\n  e1@{ animate: true }\n  e2@{ animate: true }\n  e3@{ animate: true }\n  e4@{ animate: true }\n  e5@{ animate: true }\n  e6@{ animate: true }\n  e7@{ animate: true }\n  e8@{ animate: true }\n  e9@{ animate: true }\n  e10@{ animate: true }\n  e11@{ animate: true }\n  e12@{ animate: true }\n  e13@{ animate: true }\n  e14@{ animate: true }\n  e15@{ animate: true }\n  e16@{ animate: true }\n  e17@{ animate: true }\n  e18@{ animate: true }'}),(0,s.jsx)(n.h2,{id:"stages",children:"Stages"}),(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Stage"}),(0,s.jsx)("th",{children:"Description"}),(0,s.jsx)("th",{children:"Key Activities"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Generation"})}),(0,s.jsx)("td",{children:"Data originates from source systems like databases, apps, IoT devices, APIs, files, and web services. Data engineers must understand their formats, generation velocity, and integration protocols"}),(0,s.jsx)("td",{children:"Understanding data formats, generation velocity, integration protocols, schema analysis, connectivity, and business logic"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Evaluating Source Systems"})}),(0,s.jsx)("td",{children:"Data engineer must understand how source systems generate data, including their quirks, behaviors, and limitations to design effective ingestion pipelines"}),(0,s.jsx)("td",{children:"Managing schemas, handling inconsistencies, and ensuring reliable data extraction"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ingestion"})}),(0,s.jsx)("td",{children:"Ingestion refers to the process of moving data from generating sources into a centralized processing system (data lake, warehouse, stream processor), either in batch or real-time (streaming) modes. Source systems and ingestion are critical chokepoints - a single data hiccup can disrupt the entire pipeline, breaking downstream processes and creating ripple effects"}),(0,s.jsx)("td",{children:"Selecting ingestion patterns (batch vs. streaming), validating and monitoring pipeline flows, handling schema drift, initial data quality checks"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Data Storage"})}),(0,s.jsx)("td",{children:"Data at every stage - raw, cleaned, modeled - may be persistently stored for reliability, auditability, and downstream processing. Storage architectures include data lakes (raw staging), data warehouses (structured, analytics-ready), and hybrid lakehouse solutions"}),(0,s.jsx)("td",{children:"Choosing storage types, optimizing for scalability and cost, enforcing security and backup protocols, supporting data versioning and lineage"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Transformation"})}),(0,s.jsx)("td",{children:"Converts raw ingested data into cleaned, standardized, enriched formats suitable for analytics and ML. Transformations can be orchestrated via ETL/ELT tools, SQL scripts, or data workflow managers. The Medallion Architecture often structures this into Bronze (raw), Silver (cleaned), and Gold (aggregated) layers"}),(0,s.jsx)("td",{children:"Cleansing, data normalization and format conversion, business logic and enrichment, aggregations, modeling, statistical summarization, validation and data quality testing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Serving"})}),(0,s.jsx)("td",{children:"Transformed data must be delivered to stakeholders or applications for actual use. This can involve feeding BI dashboards, analytics platforms, ML models, or external systems via APIs or reverse ETL for operational analytics"}),(0,s.jsx)("td",{children:"Providing data to BI dashboards, analytics platforms, or reporting tools; feeding machine learning models; supplying external systems via APIs or reverse ETL; ensuring reliability, freshness, and security for all consumers"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Undercurrents"})}),(0,s.jsx)("td",{children:"Several critical themes run through all stages of the data engineering lifecycle, including security, data management, DataOps, data architecture, orchestration, and software engineering best practices"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Security"}),": Implementing robust access controls, encryption, and compliance measures"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Data Management"}),":Establishing"," governance frameworks, metadata management, and data cataloging"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"DataOps"}),":Adopting"," DevOps principles for data workflows"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Data Architecture"}),": Designing scalable architectures"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Orchestration"}),": Coordinating complex workflows"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Software Engineering"}),": Applying best practices in coding, version control, and documentation"]})]})})]})]})]})]}),(0,s.jsx)(a.A,{value:"data-access",label:"Data Access",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsx)(a.A,{value:"data-access-frequency",label:"Access Frequency",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Hot Data"}),(0,s.jsx)("th",{children:"Lukewarm (Warm) Data"}),(0,s.jsx)("th",{children:"Cold Data"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Definition"}),(0,s.jsx)("td",{children:"Frequently accessed, high-value, real-time or near-real-time data"}),(0,s.jsx)("td",{children:"Moderately accessed, regularly needed but not instant"}),(0,s.jsx)("td",{children:"Infrequently accessed, usually retained for archival purposes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Access Frequency"}),(0,s.jsx)("td",{children:"Constant, immediate, sub-second or millisecond response"}),(0,s.jsx)("td",{children:"Scheduled, hours to days, moderate latency"}),(0,s.jsx)("td",{children:"Rare, weeks to years, high latency"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Access Latency"}),(0,s.jsx)("td",{children:"Sub-second or millisecond"}),(0,s.jsx)("td",{children:"Seconds to minutes"}),(0,s.jsx)("td",{children:"Minutes to hours"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Storage Media"}),(0,s.jsx)("td",{children:"RAM, in-memory database, SSDs, high-performance NAS"}),(0,s.jsx)("td",{children:"Mid-tier SSDs, high-speed HDDs, cloud object storage"}),(0,s.jsx)("td",{children:"Low-cost HDDs, archival cloud storage"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Retention Policy"}),(0,s.jsx)("td",{children:"Short-term, transactional"}),(0,s.jsx)("td",{children:"Weeks to months, operational"}),(0,s.jsx)("td",{children:"Long-term, years (or indefinitely for compliance)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Volume"}),(0,s.jsx)("td",{children:"Typically smaller, volume managed for speed"}),(0,s.jsx)("td",{children:"Medium"}),(0,s.jsx)("td",{children:"Very large, bulk data"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Value"}),(0,s.jsx)("td",{children:"Immediate, high business impact"}),(0,s.jsx)("td",{children:"Useful, moderate business impact"}),(0,s.jsx)("td",{children:"Historical, regulatory, analytical"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Security Requirements"}),(0,s.jsx)("td",{children:"Highest, critical for business operations"}),(0,s.jsx)("td",{children:"Moderate, standard access protection"}),(0,s.jsx)("td",{children:"Encryption, integrity, regulatory compliance"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability"}),(0,s.jsx)("td",{children:"Vertical scaling for speed"}),(0,s.jsx)("td",{children:"Horizontal scaling, cost-performance balance"}),(0,s.jsx)("td",{children:"Massive horizontal scaling, low access needs"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Challenges"}),(0,s.jsx)("td",{children:"High cost, data lifecycle, scalability"}),(0,s.jsx)("td",{children:"Balancing cost and access"}),(0,s.jsx)("td",{children:"Retrieval speed, data integrity, long-term maintenance"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Fraud detection, real-time stock trading, network monitoring"}),(0,s.jsx)("td",{children:"Monthly business reporting, operational data"}),(0,s.jsx)("td",{children:"Legal audits, disaster recovery, regulatory reporting"})]})]})]})}),(0,s.jsx)(a.A,{value:"data-types",label:"Data Types",children:(0,s.jsxs)("table",{class:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Data Type"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Examples"}),(0,s.jsx)("th",{children:"Use Cases"}),(0,s.jsx)("th",{children:"Notes"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Raw Data"})}),(0,s.jsx)("td",{children:"Unprocessed, unfiltered data collected directly from sources without any manipulation or analysis"}),(0,s.jsx)("td",{children:"Original, uncleaned, may contain errors or noise; very granular; inflexible until processed"}),(0,s.jsx)("td",{children:"Sensor readings, transaction logs, survey responses in original form, unedited images or video files"}),(0,s.jsx)("td",{children:"Foundation for all analysis; requires cleaning, transformation, and validation"}),(0,s.jsx)("td",{children:"Also called primary data or source data; critical for unbiased analysis"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Quantitative Data"})}),(0,s.jsx)("td",{children:"Numerical data representing measurable quantities that can be counted or measured and subjected to math operations"}),(0,s.jsx)("td",{children:"Numeric, measurable, often continuous or discrete; suitable for statistical and mathematical modeling"}),(0,s.jsx)("td",{children:"Heights, weights, sales numbers, temperatures, survey ratings (on scale)"}),(0,s.jsx)("td",{children:"Statistical analysis, predictive modeling, machine learning, numerical summarization"}),(0,s.jsx)("td",{children:"Often stored as structured data but can appear semi-structured or raw"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Qualitative Data"})}),(0,s.jsx)("td",{children:"Non-numerical, descriptive data representing categories, concepts, or subjective qualities"}),(0,s.jsx)("td",{children:"Categorical or textual data; may be structured (coded categories) or unstructured (open text)"}),(0,s.jsx)("td",{children:"Interview transcripts, social media posts, survey open responses, observations"}),(0,s.jsx)("td",{children:"Content analysis, thematic coding, sentiment analysis, NLP applications"}),(0,s.jsx)("td",{children:"Includes both structured categorical data and unstructured textual/media data"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Structured Data"})}),(0,s.jsx)("td",{children:"Data organized into predefined models or schemas, typically tabular with rows and columns"}),(0,s.jsx)("td",{children:"Highly organized; easy to store, search, and analyze; conforms to relational databases or spreadsheets"}),(0,s.jsx)("td",{children:"Databases with customer info, spreadsheets with sales data, financial records"}),(0,s.jsx)("td",{children:"Used in relational databases, data warehouses, and analytical reporting"}),(0,s.jsx)("td",{children:"Often quantitative and categorical (qualitative) data; easiest to handle computationally"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Unstructured Data"})}),(0,s.jsx)("td",{children:"Data without a predefined schema or organization, often qualitative and complex"}),(0,s.jsx)("td",{children:"No fixed format; text-heavy or multimedia; requires advanced techniques for parsing and analysis"}),(0,s.jsx)("td",{children:"Emails, videos, audio recordings, social media feeds, documents, images"}),(0,s.jsx)("td",{children:"Text mining, image/video analysis, sentiment analysis, AI-driven extraction"}),(0,s.jsx)("td",{children:"Increasingly important with big data, but challenging to manage and analyze"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Semi-structured Data"})}),(0,s.jsx)("td",{children:"Data that does not fit rigid schemas but contains tags or markers to separate elements for easier processing"}),(0,s.jsx)("td",{children:"Hybrid of structured and unstructured; contains metadata or tags alongside free-form content"}),(0,s.jsx)("td",{children:"JSON, XML, CSV files, HTML documents, tagged multimedia files"}),(0,s.jsx)("td",{children:"Easier to process than unstructured; used for web data, APIs, and metadata extraction"}),(0,s.jsx)("td",{children:"Provides flexibility of unstructured with some model-driven processing advantages"})]})]})]})})]})}),(0,s.jsx)(a.A,{value:"data-storage",label:"Data Storage",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsxs)(a.A,{value:"data-collection",label:"Data Collection",attributes:{className:"tabs__vertical"},children:[(0,s.jsx)(n.h2,{id:"bounded-vs-unbounded-data",children:"Bounded vs. Unbounded Data"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Bounded Data"}),(0,s.jsx)("th",{children:"Unbounded Data"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Definition"}),(0,s.jsx)("td",{children:"Finite data set with a known start and end point"}),(0,s.jsx)("td",{children:"Infinite or continuously growing data with no predefined end"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Characteristics"}),(0,s.jsx)("td",{children:"Fixed size, complete, and unchanging once fully collected"}),(0,s.jsx)("td",{children:"Potentially infinite, dynamic, and continuously generated"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Examples"}),(0,s.jsx)("td",{children:"Historical sales data, completed dataset for a specific period (e.g., last quarter sales)"}),(0,s.jsx)("td",{children:"Streaming logs, real-time sensor data, social media feeds"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Processing Model"}),(0,s.jsx)("td",{children:"Batch processing  -  data processed as a whole after collection"}),(0,s.jsx)("td",{children:"Stream processing  -  data processed incrementally as it arrives"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Ordering"}),(0,s.jsx)("td",{children:"Typically sequential and complete, allowing deterministic processing"}),(0,s.jsx)("td",{children:"May be out-of-order, delayed, or non-sequential due to latency and distributed sources"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Timing"}),(0,s.jsx)("td",{children:"Processed after data collection, often with latency (days, hours)"}),(0,s.jsx)("td",{children:"Processed in real-time or near real-time with minimal delay"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"System Architectures"}),(0,s.jsx)("td",{children:"Traditional Data Warehouses, ETL pipelines, batch-oriented systems"}),(0,s.jsx)("td",{children:"Streaming platforms like Apache Kafka, Apache Flink, Apache Beam, Spark Streaming"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Storage Requirements"}),(0,s.jsx)("td",{children:"Larger storage upfront for entire dataset storage"}),(0,s.jsx)("td",{children:"Continuous storage needs with potential for state management or windowing to handle data volume"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Computation Model"}),(0,s.jsx)("td",{children:"Deterministic and re-runnable computations on fixed data sets"}),(0,s.jsx)("td",{children:"Incremental, stateful computations with approximate processing or windowing to manage infinite data"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"System Complexity"}),(0,s.jsx)("td",{children:"Lower complexity in handling data consistency and completeness"}),(0,s.jsx)("td",{children:"Higher complexity to handle out-of-order events, late data, and exactly-once processing guarantees"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Error Handling"}),(0,s.jsx)("td",{children:"Errors can be corrected in batch runs before analysis"}),(0,s.jsx)("td",{children:"Needs continuous monitoring and corrective mechanisms to handle anomalies in a live stream"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability Challenges"}),(0,s.jsx)("td",{children:"Scalability mainly in storage and batch job execution"}),(0,s.jsx)("td",{children:"Requires scalable infrastructure to handle continuous high-throughput data ingestion and processing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Latency"}),(0,s.jsx)("td",{children:"Higher latency acceptable due to batch processing nature"}),(0,s.jsx)("td",{children:"Low latency required to provide timely insights or actions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Architectural Patterns"}),(0,s.jsx)("td",{children:"ETL, Lambda Architecture (batch layer dominant)"}),(0,s.jsx)("td",{children:"Kappa Architecture, unified stream processing approach combining batch and stream"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Completeness"}),(0,s.jsx)("td",{children:"Complete view of the dataset after processing"}),(0,s.jsx)("td",{children:"Incomplete snapshots at any point, with evolving data as stream progresses"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Examples from Real World"}),(0,s.jsx)("td",{children:"Financial reports for closed fiscal year; archived web logs"}),(0,s.jsx)("td",{children:"Network packet captures; social media mentions; real-time transaction feeds"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Historical analytics, reporting, compliance auditing"}),(0,s.jsx)("td",{children:"Real-time analytics, alerting, fraud detection, IoT monitoring"})]})]})]}),(0,s.jsx)(n.h2,{id:"batch-vs-micro-batch-vs-real-time-processing",children:"Batch vs. Micro-Batch vs. Real-Time Processing"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Batch Processing"}),(0,s.jsx)("th",{children:"Micro-Batch Processing"}),(0,s.jsx)("th",{children:"Real-Time Processing"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Definition"})}),(0,s.jsx)("td",{children:"Collects and stores data over a period, processing all at once"}),(0,s.jsx)("td",{children:"Processes data in small batches at short, regular intervals"}),(0,s.jsx)("td",{children:"Processes data immediately as it arrives, near-instantaneous"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Frequency"})}),(0,s.jsx)("td",{children:"Low frequency (e.g., hourly, daily, monthly)"}),(0,s.jsx)("td",{children:"Medium frequency (seconds to minutes intervals)"}),(0,s.jsx)("td",{children:"High frequency (sub-second to real-time continuous)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Latency"})}),(0,s.jsx)("td",{children:"High latency due to waiting for batch completion"}),(0,s.jsx)("td",{children:"Moderate latency, quicker than batch but not instantaneous"}),(0,s.jsx)("td",{children:"Very low latency, near-instant results"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Data Volume"})}),(0,s.jsx)("td",{children:"Large volumes of accumulated data"}),(0,s.jsx)("td",{children:"Smaller chunks of data per batch"}),(0,s.jsx)("td",{children:"Continuous streams of individual events"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Complexity"})}),(0,s.jsx)("td",{children:"Simple to implement and manage"}),(0,s.jsx)("td",{children:"Moderate complexity, combines batch and streaming elements"}),(0,s.jsx)("td",{children:"High complexity requiring advanced architecture and tooling"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Resource Utilization"})}),(0,s.jsx)("td",{children:"Efficient resource use, runs during off-peak times"}),(0,s.jsx)("td",{children:"More frequent resource use than batch, less than streaming"}),(0,s.jsx)("td",{children:"Resource-intensive, requires horizontal scaling"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Processing Model"})}),(0,s.jsx)("td",{children:"Triggered by schedule (time or data volume)"}),(0,s.jsx)("td",{children:"Triggered by time interval or data size threshold"}),(0,s.jsx)("td",{children:"Constant event-driven processing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Stateful Processing Support"})}),(0,s.jsx)("td",{children:"Yes, often requires stateful operations"}),(0,s.jsx)("td",{children:"Supports small state, similar to batch"}),(0,s.jsx)("td",{children:"Usually stateless or manages small state due to speed demand"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Data Freshness"})}),(0,s.jsx)("td",{children:"Lower data freshness, data available after processing batch"}),(0,s.jsx)("td",{children:"Near real-time freshness, data is updated every few minutes"}),(0,s.jsx)("td",{children:"Highest data freshness, updates data as it arrives"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Fault Tolerance"})}),(0,s.jsx)("td",{children:"Easier to handle failures with retries during next batch"}),(0,s.jsx)("td",{children:"Moderate fault tolerance"}),(0,s.jsx)("td",{children:"Requires robust fault tolerance mechanisms, checkpointing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Typical Technologies"})}),(0,s.jsx)("td",{children:"Apache Spark batch jobs, Hadoop MapReduce"}),(0,s.jsx)("td",{children:"Apache Spark Streaming, Fluentd, Logstash"}),(0,s.jsx)("td",{children:"Apache Kafka, Apache Flink, Apache Pulsar"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Cost"})}),(0,s.jsx)("td",{children:"Lower operational cost due to infrequency"}),(0,s.jsx)("td",{children:"Moderate operational costs"}),(0,s.jsx)("td",{children:"Higher cost due to continuous processing and infrastructure"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Use Cases"})}),(0,s.jsx)("td",{children:"End-of-day reports, billing, historical analytics"}),(0,s.jsx)("td",{children:"Incremental dashboard updates, near real-time user behavior"}),(0,s.jsx)("td",{children:"Fraud detection, monitoring, live analytics"})]})]})]}),(0,s.jsx)(n.h2,{id:"pull-vs-push",children:"Pull vs. Push"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Pull"}),(0,s.jsx)("th",{children:"Push"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Initiation"}),(0,s.jsx)("td",{children:"Data target pulls data from the source by requesting it explicitly, as needed or at scheduled intervals"}),(0,s.jsx)("td",{children:"Data source initiates and sends data to the target automatically when data is available"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Control of Flow"}),(0,s.jsx)("td",{children:"Target controls when and how much data to ingest (e.g., batch size, frequency)"}),(0,s.jsx)("td",{children:"Source controls the data flow; target has little control over rate or timing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Real-time Capability"}),(0,s.jsx)("td",{children:"Can be near-real-time but often involves periodic polling. Typically higher latency than push"}),(0,s.jsx)("td",{children:"Immediate; real-time delivery as soon as new data is generated"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability"}),(0,s.jsx)("td",{children:"Highly scalable; multiple consumers can independently fetch data at their own pace, easier replication, supports distributed scaling"}),(0,s.jsx)("td",{children:"May overwhelm consumers if the source produces more data than the targets can handle; hard to optimize for multiple consumers"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Replayability/Recovery"}),(0,s.jsx)("td",{children:"Easier to recover or reprocess missed data, as the consumer can retry requests or fetch from specific offsets"}),(0,s.jsx)("td",{children:"Replay is challenging - if a consumer misses data, it's hard to get the missing pieces back unless a buffer or queue is used"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Latency"}),(0,s.jsx)("td",{children:"May introduce latency depending on polling frequency and network delays"}),(0,s.jsx)("td",{children:"Low latency; pushes changes to consumers as soon as available"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Efficiency"}),(0,s.jsx)("td",{children:"May require more bandwidth for frequent polling; less efficient for frequent changes unless optimized"}),(0,s.jsx)("td",{children:"Efficient for sources with frequent changes or high update rates - useful for event-driven architectures"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Security"}),(0,s.jsx)("td",{children:"Target must connect to source, requiring bidirectional communication and b security layers on the source"}),(0,s.jsx)("td",{children:"More secure for sources; the source doesn't listen for network connections, reducing attack surfaces"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Operational Complexity"}),(0,s.jsx)("td",{children:"Source must allow for external requests, potentially more firewall and authentication setup; simpler consumer-side error handling and scaling"}),(0,s.jsx)("td",{children:"Potentially less operational overhead if rate limiting and buffering are handled; but flow control and backpressure management are harder"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Ownership"}),(0,s.jsx)("td",{children:"Consumer chooses what, when, and how much to ingest, offering flexibility for diverse requirements"}),(0,s.jsx)("td",{children:"Source knows and manages its own data, ensuring accurate and robust delivery"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Implementation Details"}),(0,s.jsx)("td",{children:"Requires periodic scheduler or polling mechanism; easier integration with existing APIs and systems"}),(0,s.jsx)("td",{children:"Requires consumers to implement logic for handling unsolicited data, queuing, or buffering; flow and rate limiting complex"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Hybrid Patterns"}),(0,s.jsx)("td",{children:"Hybrid approaches leverage strengths of both, such as push for immediate updates and pull for detailed/batch data"}),(0,s.jsx)("td",{children:"Often combined - e.g., system pushes notifications but clients pull detailed data as needed"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Consistency Guarantees"}),(0,s.jsx)("td",{children:"Easier to achieve exactly-once or at-least-once semantics with systems like Kafka"}),(0,s.jsx)("td",{children:"Needs careful orchestration for b consistency, especially in distributed setups"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Common Technologies"}),(0,s.jsx)("td",{children:"REST APIs, scheduled ETL, database dumps, Kafka Connect, batch queries, polling"}),(0,s.jsx)("td",{children:"Webhooks, real-time streaming (e.g., MQTT), proprietary push APIs, some ETL tools"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Reporting, batch processing, periodic data sync, data lakes, less time-sensitive operations"}),(0,s.jsx)("td",{children:"Time-sensitive, high-frequency events, IoT devices, notification systems, or real-time analytics"})]})]})]})]}),(0,s.jsx)(a.A,{value:"data-modeling",label:"Data Modeling",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Data Modeling Technique"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Characteristics"}),(0,s.jsx)("th",{children:"Advantages"}),(0,s.jsx)("th",{children:"Disadvantages"}),(0,s.jsx)("th",{children:"Use Cases"}),(0,s.jsx)("th",{children:"Examples"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Conceptual Data Modeling"}),(0,s.jsx)("td",{children:"High-level, abstract model focusing on business entities and relationships without technical detail"}),(0,s.jsx)("td",{children:"Entities and relationships shown typically via ER diagrams or UML class diagrams"}),(0,s.jsx)("td",{children:"Platform-neutral, easy communication with business stakeholders"}),(0,s.jsx)("td",{children:"Lacks technical detail for implementation"}),(0,s.jsx)("td",{children:"Business planning, stakeholder alignment, early project stages"}),(0,s.jsx)("td",{children:"ER Diagrams, UML"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Logical Data Modeling"}),(0,s.jsx)("td",{children:"Detailed model defining data elements, attributes, relationships, keys, and rules without platform dependency"}),(0,s.jsx)("td",{children:"Normalized tables, keys, constraints, and relationships; focus on data integrity and structure"}),(0,s.jsx)("td",{children:"Provides clean, normalized design; aids data quality and governance"}),(0,s.jsx)("td",{children:"Does not address physical storage, indexing, or performance optimization"}),(0,s.jsx)("td",{children:"Schema design, data governance, preparing for physical modeling"}),(0,s.jsx)("td",{children:"3NF, Data Vault modeling (hubs-links-satellites)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Physical Data Modeling"}),(0,s.jsx)("td",{children:"Model optimized for database implementation specifying tables, columns, indexes, partitions, etc"}),(0,s.jsx)("td",{children:"Denormalized/normalized tables, platform-specific constructs like indexes, partitions, cluster keys"}),(0,s.jsx)("td",{children:"Optimizes storage, retrieval, and query performance"}),(0,s.jsx)("td",{children:"Tightly coupled to specific technologies, less flexible"}),(0,s.jsx)("td",{children:"Performance tuning and optimization for specific DB engines"}),(0,s.jsx)("td",{children:"Star schema, Snowflake schema, Anchor Modeling"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Dimensional Modeling"}),(0,s.jsx)("td",{children:"Simplifies data structures for analytical queries grouping data into facts and dimensions"}),(0,s.jsx)("td",{children:"Fact tables (numeric measures) linked to dimension tables (contextual descriptors) like star or snowflake schema"}),(0,s.jsx)("td",{children:"Intuitive for analysts, improves query speed for OLAP workloads"}),(0,s.jsx)("td",{children:"Less suitable for transactional systems, more redundancy"}),(0,s.jsx)("td",{children:"BI, data warehouses, dashboards, self-service analytics"}),(0,s.jsx)("td",{children:"Star Schema, Snowflake Schema, Slowly Changing Dimensions (SCDs)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Relational Data Modeling"}),(0,s.jsx)("td",{children:"Organizes data in normalized tables ensuring minimal redundancy and data consistency"}),(0,s.jsx)("td",{children:"Tables with rows and columns, defined primary and foreign keys, normalized forms"}),(0,s.jsx)("td",{children:"Strong data integrity, widely supported, good for complex relationships"}),(0,s.jsx)("td",{children:"Can be complex to query for analytical workloads, performance overhead for joins"}),(0,s.jsx)("td",{children:"OLTP systems, master data management, transactional apps"}),(0,s.jsx)("td",{children:"2NF, 3NF, Boyce-Codd Normal Form (BCNF), ER diagrams"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Entity-Relationship (ER) Model"}),(0,s.jsx)("td",{children:"Represents entities, attributes, and their relationships for database design"}),(0,s.jsx)("td",{children:"Entities represented as objects/tables; attributes as columns; relationships with cardinality and optionality"}),(0,s.jsx)("td",{children:"Clear visualization of data relationships, promotes normalization"}),(0,s.jsx)("td",{children:"May become complex for large systems, design only"}),(0,s.jsx)("td",{children:"Database design, relational databases"}),(0,s.jsx)("td",{children:"Chen ER Model, Crow's Foot notation"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Object-Oriented Data Modeling"}),(0,s.jsx)("td",{children:"Combines data with behavior, encapsulates data and operations together representing objects"}),(0,s.jsx)("td",{children:"Objects with attributes and methods; supports inheritance, classes, and polymorphism"}),(0,s.jsx)("td",{children:"Closer to real-world modeling, reusable components"}),(0,s.jsx)("td",{children:"Complexity, less common in traditional DBs"}),(0,s.jsx)("td",{children:"Object databases, applications using OOP principles"}),(0,s.jsx)("td",{children:"Classes, inheritance hierarchies"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Hierarchical Data Modeling"}),(0,s.jsx)("td",{children:"Organizes data in tree-like parent-child relationships"}),(0,s.jsx)("td",{children:"Strict one-to-many parent-child relationships; records organized in a hierarchy"}),(0,s.jsx)("td",{children:"Simple and fast navigation in one-to-many data"}),(0,s.jsx)("td",{children:"Inflexible with many-to-many or complex relationships"}),(0,s.jsx)("td",{children:"Legacy systems, XML/JSON document stores, file systems"}),(0,s.jsx)("td",{children:"IMS database, XML schemas"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Network Data Modeling"}),(0,s.jsx)("td",{children:"Extends hierarchical to allow many-to-many relationships"}),(0,s.jsx)("td",{children:"Graph-like structures, records with multiple owners or parents"}),(0,s.jsx)("td",{children:"More flexible than hierarchical, models complex relationships"}),(0,s.jsx)("td",{children:"More complex design and management than relational"}),(0,s.jsx)("td",{children:"Complex interconnected data like telecommunications, logistics"}),(0,s.jsx)("td",{children:"CODASYL, Graph databases (Neo4j, Amazon Neptune)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Temporal/Historical Modeling"}),(0,s.jsx)("td",{children:"Tracks data changes over time for auditing, historical analysis"}),(0,s.jsx)("td",{children:"Stores multiple data versions with timestamps for valid and transaction time"}),(0,s.jsx)("td",{children:"Supports full data history and versioning, improves auditability"}),(0,s.jsx)("td",{children:"Increases data storage and complexity"}),(0,s.jsx)("td",{children:"Compliance, time-series, audit trails, customer lifecycle"}),(0,s.jsx)("td",{children:"Bitemporal modeling, Slowly Changing Dimensions (SCDs), Anchor modeling"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Agile Data Modeling"}),(0,s.jsx)("td",{children:"Enables iterative and flexible modeling adapting to evolving business needs"}),(0,s.jsx)("td",{children:"Combines techniques, emphasizes collaboration and incremental updates"}),(0,s.jsx)("td",{children:"Highly adaptable, incorporates feedback quickly"}),(0,s.jsx)("td",{children:"Can lack initial rigor, may lead to inconsistent models"}),(0,s.jsx)("td",{children:"Rapid development environments, evolving business domains"}),(0,s.jsx)("td",{children:"Often combined with other models in Agile projects"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Big Data Modeling"}),(0,s.jsx)("td",{children:"Tailored to handle volume, velocity, and variety of big data"}),(0,s.jsx)("td",{children:"May use NoSQL schema-on-read, data lakes, schemas for semi-structured data"}),(0,s.jsx)("td",{children:"Scales for huge data volumes, flexible schema"}),(0,s.jsx)("td",{children:"Less mature standards, potential for data inconsistency"}),(0,s.jsx)("td",{children:"Big data platforms, streaming analytics"}),(0,s.jsx)("td",{children:"Schema-on-read, Hadoop, NoSQL, Data lakehouse"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Inmon"}),(0,s.jsx)("td",{children:"Corporate Information Factory (CIF). Enterprise-wide data architecture integrating various data sources into a centralized warehouse. Flow: Sources \u2192 Staging (ETL) \u2192 Enterprise Data Warehouse (Data stored in 3NF) \u2192 Data Marts \u2192 Consumption"}),(0,s.jsx)("td",{children:"Top-down approach, normalized data warehouse, data marts for specific domains"}),(0,s.jsx)("td",{children:"Comprehensive, consistent enterprise view"}),(0,s.jsx)("td",{children:"Complex, time-consuming implementation"}),(0,s.jsx)("td",{children:"Large enterprises needing integrated data"}),(0,s.jsx)("td",{children:"Normalized data warehouse, data marts"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Kimball"}),(0,s.jsx)("td",{children:"Bus Architecture. Dimensional modeling approach focusing on ease of use and performance. Flow: Sources \u2192 Staging (ETL) \u2192 Enterprise Data Warehouse (STAR Shema) \u2192 Data Marts \u2192 Consumption"}),(0,s.jsx)("td",{children:"Bottom-up approach, data marts for specific business areas"}),(0,s.jsx)("td",{children:"Fast query performance, user-friendly data structures"}),(0,s.jsx)("td",{children:"Can lead to data silos, less comprehensive view"}),(0,s.jsx)("td",{children:"Mid-sized to large enterprises with specific reporting needs"}),(0,s.jsx)("td",{children:"Star schema, snowflake schema, data marts"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Vault (Linstedt)"}),(0,s.jsx)("td",{children:"Hybrid approach combining elements of 3NF and dimensional modeling. Flow: Sources \u2192 Staging (ETL) \u2192 Raw Data Vault \u2192 Business Data Vault \u2192 Data Marts \u2192 Consumption"}),(0,s.jsx)("td",{children:"Focuses on agility and scalability, accommodating changes easily"}),(0,s.jsx)("td",{children:"Supports historical tracking and auditability"}),(0,s.jsx)("td",{children:"Can be complex to implement and manage"}),(0,s.jsx)("td",{children:"Organizations needing flexibility and rapid change adaptation"}),(0,s.jsx)("td",{children:"Data vault model, hubs, links, satellites"})]})]})]})}),(0,s.jsxs)(a.A,{value:"slowly-changing-dimension",label:"Slowly Changing Dimension",children:[(0,s.jsx)(n.p,{children:"Slowly Changing Dimensions (SCDs) are dimension tables in data warehouses where attribute values change slowly over time. Unlike frequently changing fact data, dimension data (e.g., customer details, product attributes) requires historical tracking for accurate reporting. SCDs manage these changes in various ways to meet different business and analysis needs."}),(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Type 0: Retain Original"}),(0,s.jsx)("th",{children:"Type 1: Overwrite"}),(0,s.jsx)("th",{children:"Type 2: Add New Row"}),(0,s.jsx)("th",{children:"Type 3: Add New Attribute"}),(0,s.jsx)("th",{children:"Type 4: Add History Table"}),(0,s.jsx)("th",{children:"Type 5: Add Mini-Dimension"}),(0,s.jsx)("th",{children:"Type 6: Combined Approach"}),(0,s.jsx)("th",{children:"Type 7: Hybrid Approach"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Description"}),(0,s.jsx)("td",{children:"Attribute never changes; always original value"}),(0,s.jsx)("td",{children:"Overwrite old data; no history kept"}),(0,s.jsx)("td",{children:"Insert new row for each change; full history tracked"}),(0,s.jsx)("td",{children:"Add new column(s) to track limited previous value"}),(0,s.jsx)("td",{children:"Store historical data in separate history table"}),(0,s.jsx)("td",{children:"Create a mini-dimension for frequently changing attributes"}),(0,s.jsx)("td",{children:"Combines Types 1, 2, 3 in one model (overwrite, add row, add attribute)"}),(0,s.jsx)("td",{children:"Combines various SCD techniques beyond Type 6 for adaptive needs"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Visualization"}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"The attribute never changes, so the entity design simply holds the original column with no alteration"}),(0,s.jsx)(n.mermaid,{value:'erDiagram\n  CUSTOMER {\n      int id\n      string name\n      date date_of_birth  "Type 0: Never changes"\n  }'})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Changes overwrite old values, and there is no history kept"}),(0,s.jsx)(n.mermaid,{value:'erDiagram\n    CUSTOMER {\n        int id\n        string name\n        string email "Type 1: Always latest value"\n    }'})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"New row is added for each change, keeping full history. Start and end dates track consistency"}),(0,s.jsx)(n.mermaid,{value:"erDiagram\n    CUSTOMER {\n        int surrogate_key\n        int customer_id\n        string name\n        string address\n        date valid_from\n        date valid_to\n        bool is_current\n    }"})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"One or more additional columns retain limited history (e.g., previous value)"}),(0,s.jsx)(n.mermaid,{value:'erDiagram\n    CUSTOMER {\n        int id\n        string name\n        string current_address "Type 3: current"\n        string previous_address "Type 3: previous"\n    }'})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Separate history table is created to maintain full change history, keeping the current state in the main dimension"}),(0,s.jsx)(n.mermaid,{value:"erDiagram\n    CUSTOMER {\n        int id\n        string name\n        string current_address\n    }\n    CUSTOMER_HISTORY {\n        int history_id\n        int customer_id\n        string name\n        string address\n        date changed_on\n    }\n    CUSTOMER ||--o{ CUSTOMER_HISTORY : tracks"})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Mini-dimension stores rapidly changing attributes separately, referenced by the main dimension"}),(0,s.jsx)(n.mermaid,{value:"erDiagram\n    CUSTOMER {\n        int id\n        string name\n        int mini_dim_id\n    }\n    MINI_DIM {\n        int mini_dim_id\n        string preference\n        string status\n    }\n    CUSTOMER }o--|| MINI_DIM : references"})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Combines Types 1, 2, and 3. Maintains both current values (Type 1) and full history (Type 2) and a previous attribute (Type 3)"}),(0,s.jsx)(n.mermaid,{value:'erDiagram\n    CUSTOMER {\n        int surrogate_key\n        int customer_id\n        string name\n        string address_current "Type 1 (latest)"\n        string address_previous "Type 3 (previous)"\n        date valid_from\n        date valid_to\n        bool is_current\n    }'})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.p,{children:"Flexible hybrid approach, often combining multiple SCD strategies for different columns depending on business requirements"}),(0,s.jsx)(n.mermaid,{value:'erDiagram\n    CUSTOMER {\n        int surrogate_key "For Type 2 tracking"\n        int customer_id\n        string name\n        string address "Type 1 or Type 2 as needed"\n        string status_code "Could be Type 1 or 3"\n        int mini_dim_id "For Type 5 links"\n        date valid_from\n        date valid_to\n        bool is_current\n    }\n    MINI_DIM {\n        int mini_dim_id\n        string attr1\n        string attr2\n    }\n    CUSTOMER }o--|| MINI_DIM : mini_dimension'})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Change Handling Method"}),(0,s.jsx)("td",{children:"No update"}),(0,s.jsx)("td",{children:"Overwrite existing values"}),(0,s.jsx)("td",{children:"Add new record per change"}),(0,s.jsx)("td",{children:"Add new column to track previous value"}),(0,s.jsx)("td",{children:"Use separate history table for old data"}),(0,s.jsx)("td",{children:"Extract frequently changing attributes into separate mini-dim table"}),(0,s.jsx)("td",{children:"Current and historical columns plus version column"}),(0,s.jsx)("td",{children:"Flexible, combines multiple change management techniques"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Historical Data Tracking"}),(0,s.jsx)("td",{children:"No"}),(0,s.jsx)("td",{children:"No"}),(0,s.jsx)("td",{children:"Yes"}),(0,s.jsx)("td",{children:"Limited (only one previous value)"}),(0,s.jsx)("td",{children:"Yes"}),(0,s.jsx)("td",{children:"Partial history through mini-dims"}),(0,s.jsx)("td",{children:"Yes"}),(0,s.jsx)("td",{children:"Yes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Storage Impact"}),(0,s.jsx)("td",{children:"Minimal"}),(0,s.jsx)("td",{children:"Minimal"}),(0,s.jsx)("td",{children:"High (multiple rows per entity)"}),(0,s.jsx)("td",{children:"Moderate (additional columns)"}),(0,s.jsx)("td",{children:"Moderate to High (two tables)"}),(0,s.jsx)("td",{children:"Moderate (extra mini-dim tables)"}),(0,s.jsx)("td",{children:"High (due to multiple approaches combined)"}),(0,s.jsx)("td",{children:"Variable, depends on component types used"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Query Complexity"}),(0,s.jsx)("td",{children:"Very simple"}),(0,s.jsx)("td",{children:"Simple"}),(0,s.jsx)("td",{children:"More complex due to multiple rows"}),(0,s.jsx)("td",{children:"Simple for limited history"}),(0,s.jsx)("td",{children:"Moderate due to joins with history table"}),(0,s.jsx)("td",{children:"Moderate (joins with mini-dim)"}),(0,s.jsx)("td",{children:"Moderate to complex"}),(0,s.jsx)("td",{children:"Complex, depending on combination used"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Pros"}),(0,s.jsx)("td",{children:"Simple; fast queries"}),(0,s.jsx)("td",{children:"Easy implementation, fast update"}),(0,s.jsx)("td",{children:"Full historical data tracking"}),(0,s.jsx)("td",{children:"Easy access to current and prior value"}),(0,s.jsx)("td",{children:"Clear separation of current and historical data"}),(0,s.jsx)("td",{children:"Improves query performance for frequent small changes"}),(0,s.jsx)("td",{children:"Flexible; combines best of types 1, 2, 3"}),(0,s.jsx)("td",{children:"Highly adaptable to complex scenarios"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Cons"}),(0,s.jsx)("td",{children:"No history, no ability to analyze change"}),(0,s.jsx)("td",{children:"History lost"}),(0,s.jsx)("td",{children:"Adds storage; may impact performance"}),(0,s.jsx)("td",{children:"Only tracks limited history, not scalable"}),(0,s.jsx)("td",{children:"Extra complexity with multiple tables"}),(0,s.jsx)("td",{children:"Additional ETL and dimensional complexity"}),(0,s.jsx)("td",{children:"Complexity; maintenance overhead"}),(0,s.jsx)("td",{children:"High complexity; requires sophisticated design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Implementation Complexity"}),(0,s.jsx)("td",{children:"Low"}),(0,s.jsx)("td",{children:"Low"}),(0,s.jsx)("td",{children:"Moderate to high"}),(0,s.jsx)("td",{children:"Low to moderate"}),(0,s.jsx)("td",{children:"Moderate to high"}),(0,s.jsx)("td",{children:"Moderate to high"}),(0,s.jsx)("td",{children:"High"}),(0,s.jsx)("td",{children:"Very high"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Impact on Performance"}),(0,s.jsx)("td",{children:"Minimal"}),(0,s.jsx)("td",{children:"Minimal"}),(0,s.jsx)("td",{children:"Can degrade with large historical data"}),(0,s.jsx)("td",{children:"Moderate"}),(0,s.jsx)("td",{children:"Moderate"}),(0,s.jsx)("td",{children:"Moderate"}),(0,s.jsx)("td",{children:"Can be performance intensive"}),(0,s.jsx)("td",{children:"Depends on implemented hybrid techniques"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Dimension Table Action"}),(0,s.jsx)("td",{children:"No change to attribute value"}),(0,s.jsx)("td",{children:"Overwrite attribute value"}),(0,s.jsx)("td",{children:"Add new dimension row for profile with new attribute value"}),(0,s.jsx)("td",{children:"Add new column to preserve attribute's current and prior values"}),(0,s.jsx)("td",{children:"Add mini-dimension table containing rapidly changing attributes"}),(0,s.jsx)("td",{children:"Add type 4 mini-dimension, along with overwritten type 1 mini-dimension key in base dimension"}),(0,s.jsx)("td",{children:"Add type 1 overwritten attributes to type 2 dimension row, and overwrite all prior dimension rows"}),(0,s.jsx)("td",{children:"Add type 2 dimension row with new attribute value, plus view limited to current rows and/or attribute values"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Impact on Fact Analysis"}),(0,s.jsx)("td",{children:"Facts associated with attribute's original value"}),(0,s.jsx)("td",{children:"Facts associated with attribute's current value"}),(0,s.jsx)("td",{children:"Facts associated with attribute value in effect when fact occurred"}),(0,s.jsx)("td",{children:"Facts associated with both current and prior attribute alternative values"}),(0,s.jsx)("td",{children:"Facts associated with rapidly changing attributes in effect when fact occurred"}),(0,s.jsx)("td",{children:"Facts associated with rapidly changing attributes in effect when fact occurred, plus current rapidly changing attribute values"}),(0,s.jsx)("td",{children:"Facts associated with attribute value in effect when fact occurred, plus current values"}),(0,s.jsx)("td",{children:"Facts associated with attribute value in effect when fact occurred, plus current values"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Static attributes like SSN, zip codes"}),(0,s.jsx)("td",{children:"Correcting typos, non-critical updates e.g. email, phone"}),(0,s.jsx)("td",{children:"Track full history of customer address, employee job changes"}),(0,s.jsx)("td",{children:"Track current and previous salary, status"}),(0,s.jsx)("td",{children:"Maintain full historical pricing, employment data"}),(0,s.jsx)("td",{children:"Track attributes like customer segmentation that change frequently"}),(0,s.jsx)("td",{children:"Employee role and department tracking with full change history"}),(0,s.jsx)("td",{children:"Complex enterprise needs, combining multiple SCD styles"})]})]})]})]}),(0,s.jsxs)(a.A,{value:"schemas",label:"Schemas",children:[(0,s.jsx)(n.h2,{id:"schema-types",children:"Schema Types"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Physical Schema"}),(0,s.jsx)("th",{children:"Logical Schema"}),(0,s.jsx)("th",{children:"Evolving Schema"}),(0,s.jsx)("th",{children:"Contractual Schema (API)"}),(0,s.jsx)("th",{children:"Metadata Schema"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Definition"}),(0,s.jsx)("td",{children:"Describes how data is physically stored and arranged (files, indices, partitions) on storage media or DBMS"}),(0,s.jsx)("td",{children:"Defines the logical (human-readable) structure: tables, fields, relationships, constraints"}),(0,s.jsx)("td",{children:"Captures the actual schema changes (add/remove fields) over time, typically in dynamic or pipeline-driven systems"}),(0,s.jsx)("td",{children:"Schema defining fields and their validation between systems via an API contract (e.g., JSON, GraphQL)"}),(0,s.jsx)("td",{children:"Schema that describes the data about data, such as lineage, column descriptions, and governance"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Level of Abstraction"}),(0,s.jsx)("td",{children:"Lowest: hardware, file system, storage block level"}),(0,s.jsx)("td",{children:"Higher: data model, independent of storage"}),(0,s.jsx)("td",{children:"Variable: follows either physical or logical but adapts to change"}),(0,s.jsx)("td",{children:"Variable: can be logical or physical depending on API implementation"}),(0,s.jsx)("td",{children:"Varies: may refer to logical, physical, or conceptual layers"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Focus"}),(0,s.jsx)("td",{children:"Performance, storage efficiency, physical locations"}),(0,s.jsx)("td",{children:"Data organization, integrity, relationships, constraints"}),(0,s.jsx)("td",{children:"Handling schema drift, flexibility for changes"}),(0,s.jsx)("td",{children:"Interface definition, data validation, compatibility"}),(0,s.jsx)("td",{children:"Data governance, lineage, quality, observability"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Typical Stakeholders"}),(0,s.jsx)("td",{children:"DBAs, infrastructure engineers"}),(0,s.jsx)("td",{children:"Data modelers, analysts, architects"}),(0,s.jsx)("td",{children:"Data engineers, analytics teams"}),(0,s.jsx)("td",{children:"Backend engineers, API consumers/producers"}),(0,s.jsx)("td",{children:"Data governance, compliance, data stewards"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Benefits"}),(0,s.jsx)("td",{children:"Maximizes storage & query performance; supports tuning, scaling"}),(0,s.jsx)("td",{children:"Ensures consistency, maintainability, integrity of business logic"}),(0,s.jsx)("td",{children:"Enables rapid evolution, tracks change, minimizes disruption"}),(0,s.jsx)("td",{children:"Allows machine interoperability, enforces standards, prevents breakage"}),(0,s.jsx)("td",{children:"Aids data discovery, quality, lineage, and regulatory compliance"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Limitations"}),(0,s.jsx)("td",{children:"Complex to change, tightly-coupled to hardware/DBMS"}),(0,s.jsx)("td",{children:"May hide physical inefficiencies, less relevant for storage choices"}),(0,s.jsx)("td",{children:"Risk of data loss or incompatibility if not managed well"}),(0,s.jsx)("td",{children:"Tight coupling can hinder API flexibility, requires documentation"}),(0,s.jsx)("td",{children:"Can become outdated or incomplete without good processes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"DBMS optimization, partitions, indexes, backup/recovery strategies"}),(0,s.jsx)("td",{children:"ER diagrams, database normalization, data modeling"}),(0,s.jsx)("td",{children:"ELT pipelines, analytics, SaaS product changes"}),(0,s.jsx)("td",{children:"API design, system integration, microservices communication"}),(0,s.jsx)("td",{children:"Data catalogs, pipeline documentation, lineage tracking"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Examples"}),(0,s.jsx)("td",{children:"Parquet files with partitioning; index files for tables; disk layouts"}),(0,s.jsx)("td",{children:"Star schema; ERD; relational database definitions"}),(0,s.jsx)("td",{children:"Adding new analytics events; updating field names in ELT"}),(0,s.jsx)("td",{children:"REST/GraphQL/OpenAPI schema definitions; JSON schema"}),(0,s.jsx)("td",{children:"dbt sources.yml; OpenMetadata; catalog records; lineage graphs"})]})]})]}),(0,s.jsx)(n.h2,{id:"star-vs-snowflake-vs-galaxy-schema",children:"Star vs. Snowflake vs. Galaxy Schema"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Star Schema"}),(0,s.jsx)("th",{children:"Snowflake Schema"}),(0,s.jsx)("th",{children:"Galaxy Schema"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Structure"}),(0,s.jsx)("td",{children:"Central fact table linked to denormalized dimension tables"}),(0,s.jsx)("td",{children:"Fact table linked to normalized dimension tables, split hierarchically"}),(0,s.jsx)("td",{children:"Multiple fact tables sharing dimension tables, can be a mix of star and snowflake"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Visualization"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'erDiagram\n    FACT_SALES ||--o{ DIM_CUSTOMER : "belongs to"\n    FACT_SALES ||--o{ DIM_PRODUCT : "contains"\n    FACT_SALES ||--o{ DIM_DATE : "occurs on"\n    FACT_SALES ||--o{ DIM_STORE : "happens at"\n\n    FACT_SALES {\n        int sale_id\n        int customer_id\n        int product_id\n        int date_id\n        int store_id\n        float sale_amount\n        int quantity\n    }\n    DIM_CUSTOMER {\n        int customer_id\n        string customer_name\n        string gender\n        string address\n    }\n    DIM_PRODUCT {\n        int product_id\n        string product_name\n        string category\n        string brand\n    }\n    DIM_DATE {\n        int date_id\n        date full_date\n        string day_of_week\n        int month\n        int year\n    }\n    DIM_STORE {\n        int store_id\n        string store_name\n        string city\n        string state\n    }'})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'erDiagram\n    FACT_SALES ||--o{ DIM_CUSTOMER : "belongs to"\n    FACT_SALES ||--o{ DIM_PRODUCT : "contains"\n    FACT_SALES ||--o{ DIM_DATE : "occurs on"\n    FACT_SALES ||--o{ DIM_STORE : "happens at"\n\n    DIM_CUSTOMER ||--o{ DIM_GEOGRAPHY : "lives in"\n    DIM_PRODUCT ||--o{ DIM_CATEGORY : "categorized as"\n    DIM_PRODUCT ||--o{ DIM_BRAND : "manufactured by"\n    DIM_STORE ||--o{ DIM_CITY : "located in"\n    DIM_CITY ||--o{ DIM_STATE : "part of"\n\n    FACT_SALES {\n        int sale_id\n        int customer_id\n        int product_id\n        int date_id\n        int store_id\n        float sale_amount\n        int quantity\n    }\n    DIM_CUSTOMER {\n        int customer_id\n        string customer_name\n        string gender\n        int geography_id\n    }\n    DIM_GEOGRAPHY {\n        int geography_id\n        string country\n        string region\n    }\n    DIM_PRODUCT {\n        int product_id\n        string product_name\n        int category_id\n        int brand_id\n    }\n    DIM_CATEGORY {\n        int category_id\n        string category_name\n    }\n    DIM_BRAND {\n        int brand_id\n        string brand_name\n    }\n    DIM_DATE {\n        int date_id\n        date full_date\n        string day_of_week\n        int month\n        int year\n    }\n    DIM_STORE {\n        int store_id\n        string store_name\n        int city_id\n    }\n    DIM_CITY {\n        int city_id\n        string city_name\n        int state_id\n    }\n    DIM_STATE {\n        int state_id\n        string state_name\n    }'})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'erDiagram\nDIM_DATE {\n  string DateKey PK "Primary Key"\n  date FullDate\n  string DayOfWeek\n  string Month\n  string Quarter\n  string Year\n}\nDIM_PRODUCT {\n  string ProductKey PK "Primary Key"\n  string ProductName\n  string Category\n  string Brand\n}\nDIM_STORE {\n  string StoreKey PK "Primary Key"\n  string StoreName\n  string StoreLocation\n  string StoreManager\n}\nDIM_CUSTOMER {\n  string CustomerKey PK "Primary Key"\n  string FirstName\n  string LastName\n  string Gender\n  string Email\n}\n\nFACT_SALES {\n    string SalesID PK "Primary Key"\n    string DateKey FK\n    string ProductKey FK\n    string StoreKey FK\n    string CustomerKey FK\n    int QuantitySold\n    decimal SalesAmount\n}\nFACT_INVENTORY {\n    string InventoryID PK "Primary Key"\n    string DateKey FK\n    string ProductKey FK\n    string StoreKey FK\n    int QuantityOnHand\n    decimal InventoryValue\n}\nFACT_SHIPPING {\n    string ShippingID PK "Primary Key"\n    string DateKey FK\n    string ProductKey FK\n    string StoreKey FK\n    string ShippingCarrier\n    int QuantityShipped\n    decimal ShippingCost\n}\n\nDIM_DATE ||--o{ FACT_SALES : "date of"\nDIM_PRODUCT ||--o{ FACT_SALES : "product sold in"\nDIM_STORE ||--o{ FACT_SALES : "store where sold"\nDIM_CUSTOMER ||--o{ FACT_SALES : "customer buying"\n\nDIM_DATE ||--o{ FACT_INVENTORY : "date recorded"\nDIM_PRODUCT ||--o{ FACT_INVENTORY : "product in inventory"\nDIM_STORE ||--o{ FACT_INVENTORY : "store inventory"\n\nDIM_DATE ||--o{ FACT_SHIPPING : "shipping date"\nDIM_PRODUCT ||--o{ FACT_SHIPPING : "product shipped"\nDIM_STORE ||--o{ FACT_SHIPPING : "dispatch store"'})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Normalization"}),(0,s.jsx)("td",{children:"Dimension tables are denormalized (flat structure, redundancy present)"}),(0,s.jsx)("td",{children:"Dimension tables are normalized (data split into sub-tables, minimal redundancy)"}),(0,s.jsx)("td",{children:"Typically involves normalized or partially normalized dimension tables to reduce data redundancy. Dimensions are often conformed (shared across fact tables). Normalization level can vary depending on design goals"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Query Performance"}),(0,s.jsx)("td",{children:"Faster query execution due to fewer joins"}),(0,s.jsx)("td",{children:"Slower query execution due to multiple joins required"}),(0,s.jsx)("td",{children:"Performance can vary; may benefit from fewer joins but could be impacted by complexity"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Query Complexity"}),(0,s.jsx)("td",{children:"Simpler queries, fewer joins, easy to write and understand"}),(0,s.jsx)("td",{children:"More complex queries, requires deeper understanding and multiple joins"}),(0,s.jsx)("td",{children:"Queries can be complex due to multiple fact tables and shared dimensions; requires good understanding of schema"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Storage Requirements"}),(0,s.jsx)("td",{children:"Higher storage use due to redundant and denormalized data"}),(0,s.jsx)("td",{children:"More storage efficient; reduced duplication through normalization"}),(0,s.jsx)("td",{children:"Storage efficiency varies; can be optimized through shared dimensions but may still have redundancy depending on design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Redundancy"}),(0,s.jsx)("td",{children:"Higher - dimensions repeat attribute values in multiple rows"}),(0,s.jsx)("td",{children:"Lower - most redundant data is eliminated"}),(0,s.jsx)("td",{children:"Varies - some redundancy may remain depending on design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Space Usage"}),(0,s.jsx)("td",{children:"More storage space required for large datasets"}),(0,s.jsx)("td",{children:"Less storage space through normalization"}),(0,s.jsx)("td",{children:"Varies - can be optimized but may still require significant space depending on data volume and design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Foreign Keys"}),(0,s.jsx)("td",{children:"Fewer foreign keys (simple design)"}),(0,s.jsx)("td",{children:"More foreign keys due to multiple related tables"}),(0,s.jsx)("td",{children:"Multiple foreign keys due to shared dimensions; complexity depends on design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Integrity"}),(0,s.jsx)("td",{children:"Lower: Denormalization risks inconsistency due to data being updated in many places"}),(0,s.jsx)("td",{children:"Higher: Normalization enforces referential integrity and consistency"}),(0,s.jsx)("td",{children:"Varies - can be managed but may require more effort to maintain consistency"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Updates and Modifications"}),(0,s.jsx)("td",{children:"Harder to update - redundant data increases risk of inconsistent modifications"}),(0,s.jsx)("td",{children:"Easier for updates - changes in an attribute only affect one table"}),(0,s.jsx)("td",{children:"Varies - updates may be easier due to shared dimensions but can be complex depending on relationships"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Dimension Table Structure"}),(0,s.jsx)("td",{children:"Flat structure - each dimension is a single table, no sub-tables"}),(0,s.jsx)("td",{children:"Multi-layered - each dimension may be decomposed into sub-dimensions"}),(0,s.jsx)("td",{children:"Varies - dimensions can be flat or multi-layered depending on design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"BI & Reporting Suitability"}),(0,s.jsx)("td",{children:"Best for BI tools, dashboards, and quick ad hoc queries"}),(0,s.jsx)("td",{children:"Better for complex analytical queries, detailed reporting, and multidimensional analysis"}),(0,s.jsx)("td",{children:"Suitable for complex reporting needs involving multiple fact tables; requires good understanding of schema"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Maintainability"}),(0,s.jsx)("td",{children:"Easier to maintain, intuitive design"}),(0,s.jsx)("td",{children:"More difficult to maintain, complex design"}),(0,s.jsx)("td",{children:"Varies - can be complex to maintain due to multiple fact tables and shared dimensions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Design Complexity"}),(0,s.jsx)("td",{children:"Easier and faster to design and implement"}),(0,s.jsx)("td",{children:"Requires careful design due to hierarchical splitting"}),(0,s.jsx)("td",{children:"Varies - can be complex to design depending on relationships and shared dimensions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability"}),(0,s.jsx)("td",{children:"Scalable for typical analytic workloads, though can suffer performance issues at extreme scale due to redundancy"}),(0,s.jsx)("td",{children:"Good scalability, especially for complex and large-scale data with multiple hierarchies"}),(0,s.jsx)("td",{children:"Scalability varies; can handle complex data but may require careful design to avoid performance bottlenecks"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"ETL/ELT Complexity"}),(0,s.jsx)("td",{children:"Simpler ETL/ELT pipelines - fewer tables to populate and maintain"}),(0,s.jsx)("td",{children:"More complex ETL/ELT - hierarchical normalization requires careful loading and management"}),(0,s.jsx)("td",{children:"ETL/ELT complexity varies; may require more sophisticated pipelines to manage multiple fact tables and shared dimensions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Drawbacks"}),(0,s.jsx)("td",{children:"Data redundancy, storage waste, potential for inconsistencies, not suited for high-cardinality or complex hierarchies"}),(0,s.jsx)("td",{children:"Query slowness for basic analytics, complexity in query construction and ETL, harder for non-technical users to understand and navigate"}),(0,s.jsx)("td",{children:"Complexity in design and maintenance, potential performance issues if not well-optimized"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Retail sales analysis with simple product/geography/time/customer dimensions"}),(0,s.jsx)("td",{children:"Data warehouses with complex product/customer/location hierarchies, and systems requiring fine-grained data integrity"}),(0,s.jsx)("td",{children:"Enterprise data warehouses with multiple business processes, complex reporting needs, and shared dimensions across fact tables"})]})]})]})]})]})}),(0,s.jsxs)(a.A,{value:"data-architecture-patterns",label:"Architecture Patterns",children:[(0,s.jsx)(n.h2,{id:"lambda-vs-kappa",children:"Lambda vs. Kappa"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Lambda"}),(0,s.jsx)("th",{children:"Kappa"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Processing Model"}),(0,s.jsx)("td",{children:"Combines batch processing and real-time stream processing in separate layers"}),(0,s.jsx)("td",{children:"Uses a single, unified stream processing pipeline for both real-time and reprocessing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Visualization"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Ingestion [Ingestion Layer]\n      service1(Service) e1@--\x3e kafkaIngestion@{ shape: das, label: "Message Queue/Log" }\n      service2(Service N) e2@--\x3e kafkaIngestion\n      cdc1[(CDC)] e3@--\x3e kafkaIngestion\n      cdc2[(CDC N)] e4@--\x3e kafkaIngestion\n    end\n\n    subgraph Speed [Speed Layer]\n      kafkaSpeed@{ shape: das, label: "Stream Processing" }\n    end\n\n    subgraph Batch [Batch Layer]\n      bucket[("Bucket")] e5@--\x3e coldStorage[("Cold Storage")]\n    end\n\n    subgraph Serving [Serving Layer]\n      realTimeViews(Real-time Views)\n      batchViews(Batch Views)\n    end\n\n    kafkaIngestion e6@--\x3e kafkaSpeed\n    kafkaIngestion e7@--\x3e bucket\n    kafkaSpeed e8@--\x3e Serving\n    coldStorage e9@--\x3e Serving\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }\n    e8@{ animate: true }\n    e9@{ animate: true }'})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Ingestion [Ingestion Layer]\n      service1(Service) e1@--\x3e kafkaIngestion@{ shape: das, label: "Message Queue/Log" }\n      service2(Service N) e2@--\x3e kafkaIngestion\n      cdc1[(CDC)] e3@--\x3e kafkaIngestion\n      cdc2[(CDC N)] e4@--\x3e kafkaIngestion\n    end\n\n    subgraph Speed [Speed Layer]\n      kafkaSpeed@{ shape: das, label: "Stream Processing" }\n      kafkaSpeed e5@--\x3e bucket[("Bucket")]\n    end\n\n    subgraph Serving [Serving Layer]\n      realTimeViews(Real-time Views)\n      batchViews(Batch Views)\n    end\n\n    kafkaIngestion e6@--\x3e kafkaSpeed\n    kafkaSpeed e7@---\x3e Serving\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }'})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Processing Layers"}),(0,s.jsx)("td",{children:"Three layers: Batch Layer (large-scale processing), Speed Layer (real-time), Serving Layer (query)"}),(0,s.jsx)("td",{children:"Single pipeline for all data, eliminating the batch layer"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Complexity"}),(0,s.jsx)("td",{children:"High complexity; requires maintaining and synchronizing two separate codebases and pipelines"}),(0,s.jsx)("td",{children:"Simpler architecture; only one processing pipeline to maintain"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Latency"}),(0,s.jsx)("td",{children:"Batch layer processing introduces higher latency; speed layer offers low latency for real-time data"}),(0,s.jsx)("td",{children:"Low latency overall due to continuous stream processing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Fault Tolerance"}),(0,s.jsx)("td",{children:"Fault tolerant: batch layer can recompute results if speed layer fails or produces errors"}),(0,s.jsx)("td",{children:"Fault tolerant depending on stream processing reliability; relies on log replay for reprocessing errors"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Reprocessing Capability"}),(0,s.jsx)("td",{children:"Batch layer enables accurate reprocessing of historical data to fix errors or recompute results"}),(0,s.jsx)("td",{children:"Reprocessing done via replaying events from the log through the stream processor"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Accuracy"}),(0,s.jsx)("td",{children:"High accuracy due to batch layer with complete data; speed layer may produce approximate results"}),(0,s.jsx)("td",{children:"Consistent real-time results but may lack batch-layer level accuracy for complex computations"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability"}),(0,s.jsx)("td",{children:"Scales horizontally but more complex scaling due to separate batch and speed layers"}),(0,s.jsx)("td",{children:"Easier to scale stream processing horizontally; simpler operational model"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Historical Data Handling"}),(0,s.jsx)("td",{children:"Excellent, supports deep historical batch analytics and corrections"}),(0,s.jsx)("td",{children:"Less suited for complex historical data analysis, designed mainly for streaming real-time data"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Implementation Complexity"}),(0,s.jsx)("td",{children:"High development and maintenance effort due to dual pipelines and serving layer integration"}),(0,s.jsx)("td",{children:"Lower implementation and maintenance overhead"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Consistency Between Layers"}),(0,s.jsx)("td",{children:"Requires careful coordination to keep batch and speed outputs consistent"}),(0,s.jsx)("td",{children:"Single pipeline avoids consistency issues inherent in Lambda dual-layer design"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Real-Time Analytics"}),(0,s.jsx)("td",{children:"Provides real-time insights via speed layer but with possible eventual consistency lag"}),(0,s.jsx)("td",{children:"Provides immediate real-time analytics with no separate batch delay"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Support for Complex Analytics"}),(0,s.jsx)("td",{children:"Good support since batch layer handles heavy, complex queries and aggregations"}),(0,s.jsx)("td",{children:"Limited complex analytics, as everything must be handled in stream processing"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Reprocessing Complexity"}),(0,s.jsx)("td",{children:"Batch layer reprocessing is separate and managed independently"}),(0,s.jsx)("td",{children:"Reprocessing simply involves re-consuming the event stream, simplifying error correction"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Duplication Risk"}),(0,s.jsx)("td",{children:"Potential for duplication or mismatch between batch and speed layer results if not carefully managed"}),(0,s.jsx)("td",{children:"Minimal duplication risk since there is only one data processing pipeline"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Suitable for systems needing both comprehensive historical analysis and real-time insights"}),(0,s.jsx)("td",{children:"Best for real-time focused applications with simpler operational needs (e.g., IoT, user activity tracking)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Examples"}),(0,s.jsx)("td",{children:"Recommendation engines, financial modeling, large-scale analytics"}),(0,s.jsx)("td",{children:"Real-time monitoring, IoT analytics, clickstream processing, social media analytics"})]})]})]})]}),(0,s.jsx)(a.A,{value:"testing",label:"Testing",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Type"}),(0,s.jsx)("th",{children:"Purpose"}),(0,s.jsx)("th",{children:"Scope"}),(0,s.jsx)("th",{children:"When Performed"}),(0,s.jsx)("th",{children:"Key Techniques"}),(0,s.jsx)("th",{children:"Considerations"}),(0,s.jsx)("th",{children:"Relevance"}),(0,s.jsx)("th",{children:"Quality Checks"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Quality Testing"}),(0,s.jsx)("td",{children:"Validate accuracy, completeness, consistency, validity, timeliness, and uniqueness of data"}),(0,s.jsx)("td",{children:"Data at rest (tables, datasets) and in-motion (streams)"}),(0,s.jsx)("td",{children:"Often ongoing, triggered by data load or refresh"}),(0,s.jsx)("td",{children:"Profiling, validation rules, anomaly detection, null checks, deduplication"}),(0,s.jsx)("td",{children:"Identifying subtle quality issues, evolving data schemas"}),(0,s.jsx)("td",{children:"Crucial for trustworthy analytics; foundation to all downstream processes"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Descriptive Checks:"})," Validating data entries represent real-world values (e.g., valid email format, phone numbers)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Structural Checks:"})," Ensuring data conforms to schema (all required fields present, data types correct)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Integrity Checks:"})," Validating relationships between datasets (e.g., foreign keys match primary keys)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Accuracy Checks:"})," Comparing data against trusted source systems"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Timeliness Checks:"})," Confirming data freshness and updates within defined periods"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Null or Missing Values:"})," Identifying nulls where data is mandatory"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Duplicate Data:"})," Detecting duplicated records that could cause inconsistencies"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Range and Distribution Checks:"})," Confirming numeric data falls within expected ranges or distributions"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Consistency Checks:"})," Ensuring data consistency across systems and datasets"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Format Validation:"})," Checking that data values meet predefined formats or patterns"]})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Integrity Testing"}),(0,s.jsx)("td",{children:"Ensure accuracy, completeness, retrievable, verifiable, truthfulness, consistency, and reliability of data throughout its lifecycle"}),(0,s.jsx)("td",{children:"Data storage, processing, transmission, and updates"}),(0,s.jsx)("td",{children:"Routine and triggered by data changes, migrations"}),(0,s.jsx)("td",{children:"Validation rules, checksums, version control, continuous monitoring, domain and entity integrity tests"}),(0,s.jsx)("td",{children:"Managing volume & complexity, real-time validation, compliance, security"}),(0,s.jsx)("td",{children:"Critical to maintain trustworthiness of data; prevents corruption and errors across all data states and systems"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Accuracy:"})," Data matches real-world truth"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Reliability:"})," Repeatable results in different conditions"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Completeness:"})," No missing data required to maintain integrity"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Referential Integrity:"})," Relationships between tables/systems hold true (e.g., foreign keys)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Repeatability:"})," Consistent test outcomes over time"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Scalability:"})," Tests effective under large datasets"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Validation Against Requirements:"})," Checking adherence to data constraints, ranges, and allowed values"]}),(0,s.jsx)("li",{children:"Automated anomaly detection to spot unusual data patterns"}),(0,s.jsx)("li",{children:"Testing in isolated, production-like environments to avoid disruption"}),(0,s.jsx)("li",{children:"Monitoring error resolution and anomaly frequency metrics"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Integration Testing"}),(0,s.jsx)("td",{children:"Verify interactions and data flow between integrated components or systems"}),(0,s.jsx)("td",{children:"Endpoints, APIs, data sources, ETL components"}),(0,s.jsx)("td",{children:"After component/unit testing, pre-system integration"}),(0,s.jsx)("td",{children:"API calls, contract validation, mock testing"}),(0,s.jsx)("td",{children:"Managing dependencies, environment setup, flaky tests"}),(0,s.jsx)("td",{children:"Ensure data flows cleanly between systems without loss or corruption"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Testing interactions between microservices, databases, and APIs"}),(0,s.jsx)("li",{children:"Verifying data formats and response correctness during data exchanges"}),(0,s.jsx)("li",{children:"Using mocks/stubs to simulate unavailable services"}),(0,s.jsx)("li",{children:"Automated API testing with tools like REST-assured or Postman"}),(0,s.jsx)("li",{children:"Continuous integration (CI) pipeline integration to run tests upon changes"}),(0,s.jsx)("li",{children:"Validation of data transformations during integration"}),(0,s.jsx)("li",{children:"Monitoring logs and failures with detailed reporting"}),(0,s.jsx)("li",{children:"Ensuring correct error handling in data communication"}),(0,s.jsx)("li",{children:"Approaches include top-down, bottom-up, and big-bang integration testing"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Performance Testing"}),(0,s.jsx)("td",{children:"Assess system responsiveness, throughput, stability under load"}),(0,s.jsx)("td",{children:"Entire pipeline throughput, resource usage, latency"}),(0,s.jsx)("td",{children:"Pre-release or after significant changes"}),(0,s.jsx)("td",{children:"Load testing, stress testing, volume testing"}),(0,s.jsx)("td",{children:"Simulating realistic load, environment parity"}),(0,s.jsx)("td",{children:"Essential to meet SLAs for batch and streaming jobs, avoid bottlenecks"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Load Testing:"})," Measuring system behavior under expected data volumes"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Stress Testing:"})," Testing beyond normal capacity limits"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Soak Testing:"})," Running systems under load over extended time to find memory leaks"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Spike Testing:"})," Sudden large surges of data volume"]}),(0,s.jsx)("li",{children:"Measuring response times, throughput, latency, and resource utilization"}),(0,s.jsx)("li",{children:"Validating batch and streaming pipeline processing times"}),(0,s.jsx)("li",{children:"Ensuring system remains responsive with increasing data sizes"}),(0,s.jsx)("li",{children:"Starting performance tests early in development to catch issues quickly"}),(0,s.jsx)("li",{children:"Time frames vary: from minutes for load/stress/spike tests, hours for soak tests"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Regression Testing"}),(0,s.jsx)("td",{children:"Ensure new code/changes do not break existing data workflows or features"}),(0,s.jsx)("td",{children:"Entire data pipeline or specific modules"}),(0,s.jsx)("td",{children:"After any change or update"}),(0,s.jsx)("td",{children:"Automated retesting, test case prioritization"}),(0,s.jsx)("td",{children:"Test suite maintenance, execution time"}),(0,s.jsx)("td",{children:"Maintain pipeline stability; detect silent errors after changes"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Re-running previously passed tests on updated data pipelines/systems"}),(0,s.jsx)("li",{children:"Validating functional and non-functional features remain stable"}),(0,s.jsx)("li",{children:"Automated re-execution of test scripts upon schema or code changes"}),(0,s.jsx)("li",{children:"Checking data accuracy, completeness, and transformations remain correct"}),(0,s.jsx)("li",{children:'Detecting "immutable changes" where data changes should not occur'}),(0,s.jsx)("li",{children:"Maintaining a regression test suite for quick verification with new code deploys"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"End-to-End Testing"}),(0,s.jsx)("td",{children:"Validate complete workflows from ingestion through transformations to consumption"}),(0,s.jsx)("td",{children:"Across all pipeline stages and downstream applications"}),(0,s.jsx)("td",{children:"Before major releases or deployment"}),(0,s.jsx)("td",{children:"Full process simulation, real user scenario emulation"}),(0,s.jsx)("td",{children:"High complexity, environment parity"}),(0,s.jsx)("td",{children:"Confirm entire data lifecycle works as expected from source to consumer"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Verifying data ingestion, processing, storage, and output in one flow"}),(0,s.jsx)("li",{children:"Testing from data source event to final display or report generation"}),(0,s.jsx)("li",{children:"Ensuring downstream integrations (notification, payments, reports) work"}),(0,s.jsx)("li",{children:"Covering functional and non-functional aspects like usability and security"}),(0,s.jsx)("li",{children:"Performing both automated and manual E2E tests on realistic data"}),(0,s.jsx)("li",{children:"Monitoring for broken workflows or data errors affecting user journeys"}),(0,s.jsx)("li",{children:"Employing tools like Cypress, Selenium, Playwright for automation"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Functional Testing"}),(0,s.jsx)("td",{children:"Validates specific functions or business rules within data transformations"}),(0,s.jsx)("td",{children:"Specific ETL jobs, SQL functions, or data logic blocks"}),(0,s.jsx)("td",{children:"During development and after changes"}),(0,s.jsx)("td",{children:"Unit tests, SQL assertions, black-box testing"}),(0,s.jsx)("td",{children:"Test data setup, mock dependencies"}),(0,s.jsx)("td",{children:"Validate correctness of data transformations and business logic"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Testing data processing logic against defined specifications"}),(0,s.jsx)("li",{children:"Validating outputs based on expected input data"}),(0,s.jsx)("li",{children:"Checking edge cases and error handling paths"}),(0,s.jsx)("li",{children:"Verifying correctness of data transformations"}),(0,s.jsx)("li",{children:'Focus on "what" the system does, not "how" internally'}),(0,s.jsx)("li",{children:"Manual and automated tests to validate individual features"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Compliance Testing"}),(0,s.jsx)("td",{children:"Verify data adherence to legal, regulatory, and internal policies"}),(0,s.jsx)("td",{children:"Data privacy, retention, access controls, audit trails"}),(0,s.jsx)("td",{children:"Scheduled or triggered by regulation changes"}),(0,s.jsx)("td",{children:"Policy validation, audit log review"}),(0,s.jsx)("td",{children:"Dynamic rules, audits, cross-system consistency"}),(0,s.jsx)("td",{children:"Ensure data governance and regulatory compliance requirements are met"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Validating data privacy laws adherence (e.g., GDPR, HIPAA)"}),(0,s.jsx)("li",{children:"Checking data encryption is applied where required"}),(0,s.jsx)("li",{children:"Ensuring retention and deletion policies are enforced"}),(0,s.jsx)("li",{children:"Auditing data access controls and audit trails"}),(0,s.jsx)("li",{children:"Verifying reporting meets regulatory requirements"}),(0,s.jsx)("li",{children:"Penetration testing and security compliance checks often integrated"}),(0,s.jsx)("li",{children:"Documenting compliance evidence and configurations"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Contract Testing"}),(0,s.jsx)("td",{children:"Verify that communication contracts/interfaces between services remain consistent"}),(0,s.jsx)("td",{children:"API schemas, data contracts, message formats"}),(0,s.jsx)("td",{children:"Before and during integration releases"}),(0,s.jsx)("td",{children:"Schema validation, consumer-driven contract testing"}),(0,s.jsx)("td",{children:"Coordinating consumer/provider contracts"}),(0,s.jsx)("td",{children:"Prevent integration breakage due to incompatible schema changes"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Checking APIs adhere to agreed contracts (request and response formats)"}),(0,s.jsx)("li",{children:"Verification of data types, mandatory fields, and error codes"}),(0,s.jsx)("li",{children:"Ensuring backward compatibility of APIs"}),(0,s.jsx)("li",{children:"Using consumer-driven contract testing frameworks"}),(0,s.jsx)("li",{children:"Automated tests executed in CI pipelines"}),(0,s.jsx)("li",{children:"Preventing integration failures due to contract violations"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Processes Testing"}),(0,s.jsx)("td",{children:"Validate ETL/ELT logic, correctness of data transformation and processing"}),(0,s.jsx)("td",{children:"Extract, Transform, Load stages individually and combined"}),(0,s.jsx)("td",{children:"During development, scheduled after pipeline changes"}),(0,s.jsx)("td",{children:"Unit tests, integration tests, system-wide data validation"}),(0,s.jsx)("td",{children:"Complex dependencies, state handling"}),(0,s.jsx)("td",{children:"Ensure processing steps handle data correctly and produce expected results"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Validating ETL/ELT logic correctness"}),(0,s.jsx)("li",{children:"Ensuring data filtering, mapping, aggregation perform as expected"}),(0,s.jsx)("li",{children:"Checking handling of nulls, missing data"}),(0,s.jsx)("li",{children:"Verifying business rules implementations"}),(0,s.jsx)("li",{children:"Testing intermediate outputs for correctness"}),(0,s.jsx)("li",{children:"Automating process-level unit tests and scenario tests"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Pipeline Testing"}),(0,s.jsx)("td",{children:"End-to-end and targeted tests validating pipeline orchestration, error handling, and data flow"}),(0,s.jsx)("td",{children:"Orchestrator workflows, triggers, retries, alerts"}),(0,s.jsx)("td",{children:"Continuous, after pipeline deployments or fixes"}),(0,s.jsx)("td",{children:"Workflow simulations, failure scenario testing"}),(0,s.jsx)("td",{children:"Environment parity, handling intermittent failures"}),(0,s.jsx)("td",{children:"Verify pipeline robustness, alerting, and data delivery completeness"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Testing pipeline orchestration logic and scheduling"}),(0,s.jsx)("li",{children:"Validation of data flow correctness through all stages"}),(0,s.jsx)("li",{children:"End-to-end latency and throughput monitoring"}),(0,s.jsx)("li",{children:"Fault tolerance and error recovery testing"}),(0,s.jsx)("li",{children:"Automated tests triggered by pipeline runs"}),(0,s.jsx)("li",{children:"Integration with monitoring/alerting systems"}),(0,s.jsx)("li",{children:"Versioning and rollback testing for pipelines"})]})})]})]})]})}),(0,s.jsx)(a.A,{value:"infrastructure-as-code",label:"Infrastructure as Code",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsxs)(a.A,{value:"imperative-declarative",label:"Imperative/Declarative",attributes:{className:"tabs__vertical"},children:[(0,s.jsx)(n.p,{children:"Infrastructure as Code (IaC) provisions and manages computing infrastructure using code instead of manual processes. It reduces time-consuming errors, especially at scale, by defining desired states and automating deployment. This frees developers to focus on applications, while organizations gain cost control, risk reduction, and faster responses to opportunities."}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Imperative Programming"}),(0,s.jsx)("th",{children:"Declarative Programming"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Definition"})}),(0,s.jsxs)("td",{children:["Specifies ",(0,s.jsx)("em",{children:"how"})," to perform tasks step-by-step through explicit instructions"]}),(0,s.jsxs)("td",{children:["Specifies ",(0,s.jsx)("em",{children:"what"})," the desired outcome or goal is, without detailing how to achieve it"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Programming Approach"})}),(0,s.jsx)("td",{children:"The developer writes detailed instructions explicitly controlling each step to change the program state"}),(0,s.jsx)("td",{children:"Describes the desired end state; the system figures out the instructions to reach that state automatically"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Control Flow"})}),(0,s.jsx)("td",{children:"Explicit; the developer manages the exact order of operations and flow"}),(0,s.jsx)("td",{children:"Implicit; controlled by the system or runtime"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"State Management"})}),(0,s.jsx)("td",{children:"Explicit and manual; the developer must maintain and update system state"}),(0,s.jsx)("td",{children:"Abstracted away and handled automatically by the system"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Level of Abstraction"})}),(0,s.jsx)("td",{children:"Lower-level, deals with detailed procedural steps and direct system operations"}),(0,s.jsx)("td",{children:"Higher-level, more abstract, focuses on logic and outcomes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Error Handling"})}),(0,s.jsx)("td",{children:"Must be explicitly handled by the programmer; easier to introduce state inconsistency or errors"}),(0,s.jsx)("td",{children:"Often more robust due to abstraction; the system validates state before applying changes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Flexibility/Control"})}),(0,s.jsx)("td",{children:"More control over performance and optimization by managing each operation exactly"}),(0,s.jsx)("td",{children:"Less fine-grained control over execution details, focus is on describing end results"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Maintainability"})}),(0,s.jsx)("td",{children:"Can become complex and harder to maintain with scaling due to detailed step management"}),(0,s.jsx)("td",{children:"Typically easier to maintain and extend as logic is expressed declaratively"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Adaptability to State"})}),(0,s.jsx)("td",{children:"Rigid; instructions may fail if the initial state differs from assumptions"}),(0,s.jsx)("td",{children:"Adaptive; compares current state with desired state and adjusts actions dynamically"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Performance"})}),(0,s.jsx)("td",{children:"Potentially faster for low-level tasks when optimized by expert programmers"}),(0,s.jsx)("td",{children:"May add overhead from abstraction or compilation; optimized by underlying engine"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Error-Prone"})}),(0,s.jsx)("td",{children:"More prone to errors due to manual state & control flow management"}),(0,s.jsx)("td",{children:"Generally less error-prone since system manages steps and state consistency"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Debugging"})}),(0,s.jsx)("td",{children:"Easier for step-by-step tracing but can get complicated in large codebases"}),(0,s.jsx)("td",{children:"Debugging declarative code may be harder due to abstraction, requires understanding system internals"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Tools"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)(n.code,{children:"Chef"})," and ",(0,s.jsx)(n.code,{children:"Puppet"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"Terraform"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Use Cases"})}),(0,s.jsx)("td",{children:"Writing detailed data processing pipelines, manual orchestration of ETL steps, data cleaning scripts"}),(0,s.jsxs)("td",{children:["Defining database schemas, data transformations (",(0,s.jsx)(n.code,{children:"dbt"})," models), infrastructure as code (",(0,s.jsx)(n.code,{children:"Terraform"}),"), SQL queries"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Example: Creating Table (SQL)"})}),(0,s.jsx)("td",{children:"Write explicit commands to create table, add columns, alter structure; may fail if structure exists"}),(0,s.jsx)("td",{children:"Define the desired table structure and let the system handle creation or alteration dynamically"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Example Analogy"})}),(0,s.jsx)("td",{children:"Giving step-by-step instructions on how to make the sandwich starting from scratch"}),(0,s.jsx)("td",{children:"Showing a picture of the final sandwich and having a competent chef make it"})]})]})]})]}),(0,s.jsxs)(a.A,{value:"idempotency",label:"Idempotency",children:[(0,s.jsx)(n.p,{children:"Idempotency means an operation can be applied multiple times without changing the result beyond the initial application."}),(0,s.jsx)(n.h3,{id:"importance",children:"Importance"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prevents duplicate data processing and corruption during retries"}),"\n",(0,s.jsx)(n.li,{children:"Simplifies error handling by making retries safe"}),"\n",(0,s.jsx)(n.li,{children:"Ensures consistent and deterministic pipeline outputs"}),"\n",(0,s.jsx)(n.li,{children:"Enables scalable, concurrent processing without complex locking"}),"\n",(0,s.jsx)(n.li,{children:"Facilitates easier debugging and auditing"}),"\n",(0,s.jsx)(n.li,{children:"Meets strict regulatory compliance for transactional data"}),"\n"]}),(0,s.jsx)(n.h3,{id:"guidelines",children:"Guidelines"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Idempotency Keys"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Assign unique identifiers to each operation or data item"}),"\n",(0,s.jsx)(n.li,{children:"Use composite keys (e.g., source + timestamp) to detect duplicates"}),"\n",(0,s.jsx)(n.li,{children:"Store these keys to recognize repeated operation attempts and avoid reprocessing"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Employ Atomic Transactions"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Group operations into atomic units that either complete fully or rollback entirely"}),"\n",(0,s.jsx)(n.li,{children:"Use transactional ACID-compliant storage systems where possible"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deduplication Techniques"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement deduplication at multiple levels (data ingestion, processing, storage)"}),"\n",(0,s.jsx)(n.li,{children:"Utilize probabilistic data structures (Bloom filters) and sliding window algorithms for efficient duplicate detection"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Checkpointing and State Management"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maintain and persist checkpoints/states for recovery and partial processing resumption"}),"\n",(0,s.jsx)(n.li,{children:"Enable pipeline to restart safely from the last consistent state after failures"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Contextual Uniqueness"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Incorporate business logic attributes in idempotency checks to catch logical duplicates"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Concurrency Control"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Design systems that handle concurrent writes gracefully using idempotency"}),"\n",(0,s.jsx)(n.li,{children:"Leverage modern concurrency control patterns like non-blocking concurrency"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose Idempotent Storage Backends"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Leverage storage systems that support conditional updates or compare-and-swap semantics (e.g., Delta Lake, Apache Hudi, distributed NoSQL with ACID features)"}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h3,{id:"testing-and-validation",children:"Testing and Validation"}),(0,s.jsx)(n.h3,{id:"validation-techniques",children:"Validation Techniques"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing Methodologies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Repeated Execution Testing"}),": Re-run operations multiple times and verify the same state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fault Injection Testing"}),": Simulate failures (network, crashes) to observe idempotent behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Concurrent Operation Testing"}),": Run identical operations simultaneously to test race conditions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Transition Validation"}),": Confirm system transitions remain consistent regardless of operation frequency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time-Window Testing"}),": Retry operations across time spans to ensure idempotency holds over time"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation Techniques"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Range Checking"}),": Validate data values fall within acceptable limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Checking"}),": Verify data types conform to expectations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Format Checking"}),": Ensure compliance with required data formats (e.g., emails, phone numbers)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency Checks"}),": Confirm relational integrity across fields and datasets"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automated Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Property-based testing to generate varied and edge-case scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Chaos engineering tools to introduce faults in production-like environments"}),"\n",(0,s.jsx)(n.li,{children:"Integration and regression tests to maintain idempotency guarantees as systems evolve"}),"\n",(0,s.jsx)(n.li,{children:"Performance monitoring to assess idempotency overhead"}),"\n"]}),"\n"]}),"\n"]})]})]})}),(0,s.jsx)(a.A,{value:"security",label:"Security",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsx)(a.A,{value:"security-overview",label:"Overview",attributes:{className:"tabs__vertical"},children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Authentication"}),(0,s.jsx)("th",{children:"Authorization"}),(0,s.jsx)("th",{children:"Encryption"}),(0,s.jsx)("th",{children:"Tokenization"}),(0,s.jsx)("th",{children:"Data Masking"}),(0,s.jsx)("th",{children:"Data Obfuscation"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Definition"}),(0,s.jsx)("td",{children:"Verifying identity of a user or system"}),(0,s.jsx)("td",{children:"Granting or denying access rights to resources"}),(0,s.jsx)("td",{children:"Transforming data into unreadable format to protect it"}),(0,s.jsx)("td",{children:"Replacing sensitive data with non-sensitive tokens"}),(0,s.jsx)("td",{children:"Replacing sensitive data with fictitious but realistic data"}),(0,s.jsx)("td",{children:"Hiding data through transformation to prevent understanding"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Purpose"}),(0,s.jsx)("td",{children:"Confirming who is accessing the system"}),(0,s.jsx)("td",{children:"Controlling what authenticated users can do/access"}),(0,s.jsx)("td",{children:"Protecting data confidentiality during storage/transit"}),(0,s.jsx)("td",{children:"Safeguarding sensitive data by replacing it with tokens"}),(0,s.jsx)("td",{children:"Protecting sensitive info while keeping data useful"}),(0,s.jsx)("td",{children:"Preventing data exposure while often preserving format"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scope"}),(0,s.jsx)("td",{children:"Identity level (user, device, service)"}),(0,s.jsx)("td",{children:"Permission level (file, operation, service)"}),(0,s.jsx)("td",{children:"Data at rest, in transit"}),(0,s.jsx)("td",{children:"Specific sensitive data fields/elements"}),(0,s.jsx)("td",{children:"Databases, tables, fields, datasets for testing/sharing"}),(0,s.jsx)("td",{children:"Various data forms, often to resist reverse engineering"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Reversibility"}),(0,s.jsx)("td",{children:"N/A (identity verification)"}),(0,s.jsx)("td",{children:"N/A (access control)"}),(0,s.jsx)("td",{children:"Reversible if decryption key is held"}),(0,s.jsx)("td",{children:"Usually reversible via token vault, some are irreversible"}),(0,s.jsx)("td",{children:"Usually irreversible; aim is to prevent data recovery"}),(0,s.jsx)("td",{children:"Usually irreversible or complex to reverse"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Security Focus"}),(0,s.jsx)("td",{children:"Identity assurance"}),(0,s.jsx)("td",{children:"Access control enforcement"}),(0,s.jsx)("td",{children:"Confidentiality, data leakage prevention"}),(0,s.jsx)("td",{children:"Strong data security with minimal data exposure"}),(0,s.jsx)("td",{children:"Privacy compliance, risk reduction"}),(0,s.jsx)("td",{children:"Anti-reverse engineering, protecting intellectual property"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Data Format Preservation"}),(0,s.jsx)("td",{children:"N/A"}),(0,s.jsx)("td",{children:"N/A"}),(0,s.jsx)("td",{children:"Does not preserve original data format visibly"}),(0,s.jsx)("td",{children:"Can preserve format (format-preserving tokenization)"}),(0,s.jsx)("td",{children:"Preserves data usability and format"}),(0,s.jsx)("td",{children:"Often preserves structure/format for usability"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Performance Impact"}),(0,s.jsx)("td",{children:"Low to medium, depends on method"}),(0,s.jsx)("td",{children:"Low to medium, depends on complexity of policies"}),(0,s.jsx)("td",{children:"Can be high, especially with strong encryption and large data"}),(0,s.jsx)("td",{children:"Medium, due to token vault and lookups"}),(0,s.jsx)("td",{children:"Low to medium, depending on masking method (static/dynamic)"}),(0,s.jsx)("td",{children:"Low to medium, depends on obfuscation technique"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Complexity"}),(0,s.jsx)("td",{children:"Can be complex (multi-factor, adaptive)"}),(0,s.jsx)("td",{children:"Can be complex with fine-grained policies and delegation"}),(0,s.jsx)("td",{children:"Complex key management and cryptographic implementation"}),(0,s.jsx)("td",{children:"Complex token vault/database management"}),(0,s.jsx)("td",{children:"Intermediate; requires design of masking policies"}),(0,s.jsx)("td",{children:"Intermediate; requires custom transformation/logics"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Regulatory Compliance"}),(0,s.jsx)("td",{children:"Supports compliance by preventing unauthorized access"}),(0,s.jsx)("td",{children:"Supports compliance by enforcing access control"}),(0,s.jsx)("td",{children:"Strong support for data privacy and protection laws"}),(0,s.jsx)("td",{children:"Helps meet PCI DSS, GDPR by masking real data"}),(0,s.jsx)("td",{children:"Ensures compliance with GDPR, HIPAA, CCPA in testing/sharing"}),(0,s.jsx)("td",{children:"Assists compliance by protecting sensitive info exposure"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Key Limitation"}),(0,s.jsx)("td",{children:"Doesn't control resource access beyond identity verification"}),(0,s.jsx)("td",{children:"Authz policies can be bypassed if authN is weak"}),(0,s.jsx)("td",{children:"Key management critical; if keys lost, data unrecoverable"}),(0,s.jsx)("td",{children:"Reliance on token vault security; complexity"}),(0,s.jsx)("td",{children:"May reduce realism or break referential integrity"}),(0,s.jsx)("td",{children:"Can be reverse-engineered if weak transformations used"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Logins, multi-factor auth, biometric verification"}),(0,s.jsx)("td",{children:"Role-based access control, attribute-based access control"}),(0,s.jsx)("td",{children:"Securing emails, files, network traffic, databases"}),(0,s.jsx)("td",{children:"Payment card processing, PII protection, API token usage"}),(0,s.jsx)("td",{children:"Test/dev environments, analytics with safe data, compliance"}),(0,s.jsx)("td",{children:"Protecting source code, data export, secure telemetry"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Example Techniques"}),(0,s.jsx)("td",{children:"Passwords, biometrics, OTP, SSO"}),(0,s.jsx)("td",{children:"RBAC, ABAC, ACLs, policy engines"}),(0,s.jsx)("td",{children:"AES, RSA, TLS/SSL, hashing"}),(0,s.jsx)("td",{children:"Format-preserving tokenization, stateless/stateful tokens"}),(0,s.jsx)("td",{children:"Substitution, shuffling, scrambling, nulling, encryption-based masking"}),(0,s.jsx)("td",{children:"Character substitution, ciphering, noise addition"})]})]})]})}),(0,s.jsxs)(a.A,{value:"authentication",label:"Authentication",children:[(0,s.jsx)(n.h2,{id:"evolution-of-authentication-methods",children:"Evolution of Authentication Methods"}),(0,s.jsx)(n.mermaid,{value:"    graph TB\n\n    subgraph auth [WWW-Authentication]\n      direction LR\n\n      authUser(User) e1@--\x3e |username + password| authServer(Server)\n    end\n\n    auth e2@--\x3e |inability to control the login lifecycle| session\n\n    subgraph session [Session-Cookie]\n      direction LR\n\n      sessionUser(User) e3@--\x3e |cookie| sessionServer(Server)\n      sessionServer e4@--\x3e sessionDb[(DB)]\n      sessionDb e5@--\x3e |session ID| sessionUser\n    end\n\n    session e6@--\x3e |no mobile support| token\n\n    subgraph token [Token-Based]\n      direction LR\n\n      tokenUser(User) e7@--\x3e |token| tokenServer(Server)\n      tokenServer e8@--\x3e |validate token| tokenValidator(Token Validation Service)\n    end\n\n    token e9@--\x3e |reduce token validation| jwt\n\n    subgraph jwt [JWT]\n      direction LR\n\n      jwtToken(Token: header.payload.signature)\n    end\n\n    jwt e10@--\x3e |cross-site login| sso\n\n    subgraph sso [SSO]\n      direction LR\n\n      ssoUser(User) e11@--\x3e ssoDomain1(a.com)\n      ssoUser e12@--\x3e ssoDomain2(b.com)\n      ssoUser e13@--\x3e ssoDomain3(c.com<br/>CAS - Central Authentication Service)\n      ssoDomain1 e14@--\x3e ssoDomain3\n      ssoDomain2 e15@--\x3e ssoDomain3\n    end\n\n    sso e16@--\x3e |3rd party access| oauth\n\n    subgraph oauth [OAuth 2.0]\n        direction LR\n\n        oauthUser(OAuth 2.0) e17@--\x3e |browser & server| code(Authentication Code)\n        oauthUser e18@--\x3e |server only| credentials(User Credentials)\n        oauthUser e19@--\x3e |implicit grant| native(Native App)\n    end\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }\n    e8@{ animate: true }\n    e9@{ animate: true }\n    e10@{ animate: true }\n    e11@{ animate: true }\n    e12@{ animate: true }\n    e13@{ animate: true }\n    e14@{ animate: true }\n    e15@{ animate: true }\n    e16@{ animate: true }\n    e17@{ animate: true }\n    e18@{ animate: true }\n    e19@{ animate: true }"}),(0,s.jsx)(n.h2,{id:"credentials-base64",children:"Credentials (Base64)"}),(0,s.jsx)(n.mermaid,{value:"  sequenceDiagram\n  autonumber\n\n  participant Client\n  box Server\n    participant Server\n    participant Database\n  end\n\n  note left of Client: Form with username and password\n\n  Client->>Server: HTTPS Connection <br/> Credentials Encryption with SSL\n  Server->>Server: Decrypts with SSL cert private key\n  Server->>Database: Username lookup & hashed password verification\n  Database->>Server: User record with hashed password\n  Server->>Client: Authentication Status"}),(0,s.jsx)(n.h2,{id:"json-web-token-jwt",children:"JSON Web Token (JWT)"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{style:{width:"70%"},children:"Visualization"}),(0,s.jsx)("th",{children:"Specs"})]})}),(0,s.jsx)("tbody",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:"    sequenceDiagram\n    autonumber\n\n    participant User\n    participant Server\n\n    box Signing Algorithm\n        participant JWT Provider\n        participant JWT Consumer\n    end\n\n    User->>Server: Login <br/> username & password\n    Server->>Server: Validate credentials\n    Server->>JWT Provider: Create & Sign JWT with secret\n\n    alt Public Key\n        JWT Provider->>JWT Provider: Sign JWT with private key\n        JWT Provider->>JWT Consumer: Signed JWT + Public Key\n        JWT Consumer->>JWT Consumer: Verify with public key (RS256, ES256)\n    end\n\n    alt Symmetric Key\n        JWT Provider->>JWT Provider: Sign JWT with public key\n        JWT Provider->>JWT Consumer: Signed JWT\n        JWT Provider--\x3eJWT Consumer: Shared public key\n        JWT Consumer->>JWT Consumer: Verify with public key (HS256, HMAC)\n    end\n\n    JWT Provider->>Server: Signed JWT\n    Server->>User: Authorization Bearer JWT Token\n    User->>User: Store JWT locally\n    User->>Server: /resource/book<br/>Authorization Bearer JWT Token\n    Server->>Server: Validate signature\n    Server->>User: OK - access granted"})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"JWT Structure"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.p,{children:"Content"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.p,{children:"Header"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "alg": "HS256",\n    "type": "JWT"\n}\n'})})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.p,{children:"Data"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "user_id": 1234,\n}\n'})})]}),(0,s.jsxs)("li",{children:["Signature: ",(0,s.jsx)(n.code,{children:'HMACSHA256("base64(header).base64(data)", secret)'})]})]})]}),(0,s.jsxs)("li",{children:["Encode each part using Base64: ",(0,s.jsx)(n.code,{children:"base64(header)"}),", ",(0,s.jsx)(n.code,{children:"base64(data)"}),", ",(0,s.jsx)(n.code,{children:"base64(signature)"})]}),(0,s.jsxs)("li",{children:["Concatenate each part using dot (",(0,s.jsx)(n.code,{children:"."}),"): ",(0,s.jsx)(n.code,{children:"base64(header).base64(data).base64(signature)"})]})]})]})})})]})})]}),(0,s.jsx)(n.h2,{id:"oauth-20",children:"Oauth 2.0"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{style:{width:"70%"},children:"Visualization"}),(0,s.jsx)("th",{children:"Specs"})]})}),(0,s.jsx)("tbody",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:"  sequenceDiagram\n  autonumber\n\n  participant User\n  participant Web App\n  participant Auth0 Tenant (Identity Provider)\n  participant Server\n\n  User->>Web App: Click login link\n  Web App->>Auth0 Tenant (Identity Provider): Authorization Code Request to `/authorize`\n  Auth0 Tenant (Identity Provider)->>Web App: Redirect to `login/authorization` prompt\n  User->>Auth0 Tenant (Identity Provider): Authenticate & Consent\n  Auth0 Tenant (Identity Provider)->>Web App: Authorization Code\n  Web App->>Auth0 Tenant (Identity Provider): Authorization Code for Application Credentials\n  Auth0 Tenant (Identity Provider)->>Auth0 Tenant (Identity Provider): Validate Authorization Code & Application Credentials\n  Auth0 Tenant (Identity Provider)->>Web App: ID Token & Access Token\n  Web App->>Server: Request user data with Access Token\n  Server->>Web App: Response"})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)("b",{children:"Open Authorization (OAuth)"}),": Protocol for sharing user Authorization across systems"]}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"OAuth 1.0"}),": Protocol designed only for web browser only"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"OAuth 2.0"}),": Protocol for cross-platform use (web, mobile, desktop, API)"]})]})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Involved Parties"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"User (Resource Owner)"}),": Authorizes flows across systems"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Identity Provider (IdP)"}),": Stores user identity, validates credentials, and shares authorization with other services"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Server"}),": Service user accesses for authorization"]})]})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Flow Types"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Authorization code"}),": Client gets a code from server, exchanges for access token"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Client credentials"}),": Client directly authenticates for access to its resources"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Implicit code"}),": Deprecated due to security risks"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Resource owner password"}),": User's credentials exchanged for access token, not recommended for security reasons"]})]})]})]})})]})})]}),(0,s.jsx)(n.h2,{id:"ssh-keys",children:"SSH Keys"}),(0,s.jsx)(n.mermaid,{value:"  sequenceDiagram\n  autonumber\n\n  participant Client\n  participant Server\n\n  note left of Client: Host key: public/private userkey\n  Client->>Server: Authenticator userkey <br/> public key\n  note right of Server: Public userkey & client host keys\n\n  note right of Server: Host key: public/private userkey\n  Server->>Client: Authenticator hostkey <br/> server authentication\n  note left of Client: Public host keys"}),(0,s.jsx)(n.h2,{id:"ssl-certificates",children:"SSL Certificates"}),(0,s.jsx)(n.mermaid,{value:"  sequenceDiagram\n  autonumber\n\n  participant Client\n  participant Server\n\n  Client->>Server: https://google.com\n  Server->>Client: SSL Certificate\n\n  Client->>Client: Validity Expiry Check\n  Client->>Client: Issue Authority (CA) Check\n  Client->>Client: Domain Name Match Check\n\n  Client->>Server: Random Encrypted Key\n  Server->>Server: Decrypts with SSL cert private key\n\n  Server->>Client: Secured Connection"}),(0,s.jsx)(n.h2,{id:"2fa-two-factor-authentication",children:"2FA (Two-Factor Authentication)"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{style:{width:"80%"},children:"Visualization"}),(0,s.jsx)("th",{children:"Specs"})]})}),(0,s.jsx)("tbody",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:"  sequenceDiagram\n  autonumber\n\n  participant User\n  participant Authentication Service\n  participant Database\n  participant Authenticator Client\n\n  alt Stage 1: User enables 2SA Service\n    User->>Authentication Service: Request a secret key\n    Authentication Service->>Authentication Service: Generate secret key\n    Authentication Service->>Database: Store secret key\n    Authentication Service->>User: URI in a form of a QR code<br/>otpauth://topt/issuer:user?secret=secretkey<br/>\u21e3<br/>otpauth://topt/google:Joe?secret=E884S34\n    User->>Authenticator Client: Scan QR code\n    User->>User: Store secret key in Authenticator\n  end\n\n  alt Stage 2: User uses 2SA Service for authentication\n  Authenticator Client->>Authenticator Client: every 30 seconds refreshes secret key (6-digit number)<br/>using TOPT (Time-based One-Time Password) algorithm<br/>\u21e3<br/>secret key + timestamp = 6-digit number\n  Authenticator Client->>User: Enter generated password\n  User->>Authentication Service: Send password to server\n  Authentication Service->>User: Comparison result of client-side password and server-side password\n  Authentication Service->>Database: Read secret key<br/>generates password using the same TOTP algorithm<br/>as authenticator client<br/>\u21e3<br/>secret key + timestamp = 6-digit number\n  end"})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Safety"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Secret key transmission via ",(0,s.jsx)(n.code,{children:"HTTPS"})]}),(0,s.jsx)("li",{children:"Encryption of secret keys in client and database"})]})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"Security"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Password (6-digit number) has 1 million combinations"}),(0,s.jsx)("li",{children:"Changes every 30 seconds, making it hard to guess"})]})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"2FA Code Types"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"SMS code, scratch card, mobile app"}),(0,s.jsx)("li",{children:"Hardware token: U2F FIDO key, MFA token, digital ID"}),(0,s.jsx)("li",{children:"Biometric system: finger/hand print, iris scan, behavior/movement tracking"})]})]})]})})]})})]}),(0,s.jsx)(n.h2,{id:"2sa-two-step-authentication",children:"2SA (Two-Step Authentication)"}),(0,s.jsx)(n.mermaid,{value:"      sequenceDiagram\n      autonumber\n\n      participant User\n      participant Server\n      participant Access Granted\n\n      User->>Server: username,password &<br/>2SV (Step Verification) token/cookie\n\n      alt Validate username & password\n        Server->>User: no - auth failed\n        Server->>Server: yes\n      end\n\n      alt 2SV Valid\n        Server->>Access Granted: yes\n        Server->>Server: no\n      end\n\n      Server->>Server: Prompt for OTP (One-Time Password)\n      alt OTP\n        note over Server: Single Factor, 2SV<br/>SMS, email\n        note over Server: Two Factor, 2SV<br/>Google Auth, SmartCard\n      end\n\n      alt 2SV code valid\n        Server->>User: no - password compromised\n        Server->>Server: yes\n      end\n\n      alt User trust this device\n        Server->>User: yes - store 2SV cookie\n        Server->>Access Granted: no\n      end"})]}),(0,s.jsx)(a.A,{value:"authorization",label:"Authorization",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Role-Based Access Control (RBAC)"}),(0,s.jsx)("th",{children:"Attribute-Based Access Control (ABAC)"}),(0,s.jsx)("th",{children:"Access Control List (ACL)"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Concept"}),(0,s.jsx)("td",{children:"Assigns permissions to users based on their roles within an organization"}),(0,s.jsx)("td",{children:"Grants access based on attributes of the user, resource, environment, and context"}),(0,s.jsx)("td",{children:"A list of specific rules defining who can access an object and what actions allowed"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Main Focus"}),(0,s.jsx)("td",{children:"Roles and their associated permissions"}),(0,s.jsx)("td",{children:"Attributes and policies combining them"}),(0,s.jsx)("td",{children:"Explicit rules tied to individual resources"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Key Components"}),(0,s.jsx)("td",{children:"Users, Roles, Permissions, Sessions"}),(0,s.jsx)("td",{children:"Subjects (users), Objects (resources), Actions, Environment, Policies"}),(0,s.jsx)("td",{children:"Resources, Access Control Entries (ACEs) specifying users/groups and their permissions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Visualization"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph User Authorization Request\n        A(User Requests Access) e1@--\x3e B(User Identity Verified)\n        B e2@--\x3e C(Retrieve User Roles)\n    end\n\n    subgraph RBAC System\n        C e3@--\x3e D(Check Roles Assigned to User)\n        D e4@--\x3e E(Retrieve Permissions for Roles)\n        E e5@--\x3e F{Action Permitted}\n    end\n\n    subgraph Resource Access\n        F e6@--\x3e|Grant| G(Grant Access to Resource)\n        F e7@--\x3e|Deny| H(Deny Access)\n    end\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    subgraph User Request\n        A(User Requests Access) e1@--\x3e B(User Identity Verified)\n        B e2@--\x3e C(Attributes Collected from Subject, Object, Action, Environment)\n    end\n\n    subgraph Policy Evaluation\n        C e3@--\x3e D("Send Attributes to Policy Decision Point (PDP)")\n        D e4@--\x3e E(Evaluate Policies Using Attributes)\n        E e5@--\x3e F{Policy Decision}\n    end\n\n    subgraph Enforcement\n        F e6@--\x3e|Grant| G("Policy Enforcement Point (PEP) Grants Access")\n        F e7@--\x3e|Deny| H(PEP Denies Access)\n    end\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }'})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph User Request\n        A(User Requests Access to Resource) e1@--\x3e B(Verify User Identity)\n    end\n\n    subgraph Access Control List Check\n        B e2@--\x3e C(Retrieve ACL for Requested Resource)\n        C e3@--\x3e D(Check if User is in ACL)\n        D e4@--\x3e E{Access Allowed}\n    end\n\n    subgraph Enforcement\n        E e5@--\x3e|Grant| F(Grant Access to Resource)\n        E e6@--\x3e|Deny| G(Deny Access)\n    end\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Access Control Model"}),(0,s.jsx)("td",{children:"Role-centric, static binding of permissions"}),(0,s.jsx)("td",{children:"Policy-centric, dynamic evaluation of attributes at request time"}),(0,s.jsx)("td",{children:"Rule-centric, access defined by explicit rules for users or groups per resource"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Flexibility"}),(0,s.jsx)("td",{children:"Moderate. Roles predefined; less adaptable to context changes"}),(0,s.jsx)("td",{children:"High. Can consider dynamic and contextual information (time, location, device, etc.)"}),(0,s.jsx)("td",{children:"Low to moderate. Rules usually static and manually maintained"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Granularity"}),(0,s.jsx)("td",{children:"Coarse to moderate, depends on number and granularity of roles"}),(0,s.jsx)("td",{children:"Fine-grained; policies can combine multiple attributes for precise decisions"}),(0,s.jsx)("td",{children:"Fine-grained at resource level, specifying detailed permissions per user/object"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Scalability"}),(0,s.jsx)("td",{children:"Scales well with a manageable number of roles; risk of role explosion if too many roles created"}),(0,s.jsx)("td",{children:"Can become complex and computationally heavy with many attributes and policies"}),(0,s.jsx)("td",{children:"Can be complex to manage at scale if many resources and users require rules"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Administration"}),(0,s.jsx)("td",{children:"Centralized administration through role assignments; easier for compliance audits"}),(0,s.jsx)("td",{children:"Complex policy administration requiring careful attribute and policy design"}),(0,s.jsx)("td",{children:"Decentralized - resource owners or admins define ACLs; can be cumbersome"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Policy Evaluation"}),(0,s.jsx)("td",{children:"At user-login or session creation, roles assigned then used throughout session"}),(0,s.jsx)("td",{children:"Real-time evaluation of attributes at each access request"}),(0,s.jsx)("td",{children:"Each access request evaluated against ordered ACL rules sequentially"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Security Strength"}),(0,s.jsx)("td",{children:"Good for static deterministic control but vulnerable if roles have excessive privileges"}),(0,s.jsx)("td",{children:"Potentially stronger due to fine-grained, context-aware policies"}),(0,s.jsx)("td",{children:"Strong when rules are well managed; can be prone to errors if rules overlap"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Policy Complexity"}),(0,s.jsx)("td",{children:"Simpler conceptually and easier to implement for basic needs"}),(0,s.jsx)("td",{children:"More complex, requiring detailed attribute and policy management"}),(0,s.jsx)("td",{children:"Simple for small sets of resources but can become complex"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Typical Policy Components"}),(0,s.jsx)("td",{children:"Roles, permissions, users, sessions"}),(0,s.jsx)("td",{children:"Attributes (user, resource, environment), policies, rules combining attributes"}),(0,s.jsx)("td",{children:"Access Control Entries (ACEs) specifying users/groups and their permissions"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Errors and Conflicts"}),(0,s.jsx)("td",{children:"Role explosion can create overlap or excessive permissions"}),(0,s.jsx)("td",{children:"Policy conflicts can be complex to detect and resolve"}),(0,s.jsx)("td",{children:"Rule ordering is critical; earlier rules take precedence, leading to conflicts if mismanaged"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Management Overhead"}),(0,s.jsx)("td",{children:"Moderate; fewer roles means simpler management but can grow with complexity of roles"}),(0,s.jsx)("td",{children:"Higher due to attribute and policy complexity"}),(0,s.jsx)("td",{children:"High if many resources/users require individualized ACLs"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"User Control"}),(0,s.jsx)("td",{children:"No direct control by end users; all managed by administrators"}),(0,s.jsx)("td",{children:"No direct user control; policy-driven access"}),(0,s.jsx)("td",{children:"Owners may control ACLs on their resources (discretionary control)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Compliance and Auditing"}),(0,s.jsx)("td",{children:"Easier to audit due to defined roles and permissions"}),(0,s.jsx)("td",{children:"More complex auditing due to dynamic policies but more precise logging possible"}),(0,s.jsx)("td",{children:"Auditable if ACLs are properly logged and maintained"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Hybrid Use"}),(0,s.jsx)("td",{children:"Often combined with ABAC for context-aware refinements"}),(0,s.jsx)("td",{children:"Can include role as an attribute or integrate with RBAC"}),(0,s.jsx)("td",{children:"ACLs often used alongside RBAC or ABAC for network or low-level access control layers"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Example Permissions"}),(0,s.jsx)("td",{children:'"HR Manager" role can approve leave requests and view payroll data'}),(0,s.jsx)("td",{children:"User accessing resource only during business hours and from corporate device"}),(0,s.jsx)("td",{children:"IP-based allow/deny rules on network devices or file read/write permissions per user"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Use Cases"}),(0,s.jsx)("td",{children:"Enterprises with clearly defined job functions and structured hierarchies"}),(0,s.jsx)("td",{children:"Environments needing fine-grained, dynamic, context-aware access decisions"}),(0,s.jsx)("td",{children:"Network devices (routers, firewalls), file systems, and simple resource-based control"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Common Implementations"}),(0,s.jsx)("td",{children:"Microsoft Active Directory, Oracle RBAC, databases, enterprise IT systems"}),(0,s.jsx)("td",{children:"Healthcare, finance, government systems with strict compliance needs"}),(0,s.jsx)("td",{children:"Router/firewall rules, Windows/Linux file system permissions, some databases"})]})]})]})})]})}),(0,s.jsx)(a.A,{value:"data-mesh",label:"Data Mesh",children:(0,s.jsxs)(d.A,{queryString:"secondary",children:[(0,s.jsxs)(a.A,{value:"overview",label:"Overview",attributes:{className:"tabs__vertical"},children:[(0,s.jsx)(n.p,{children:"Data mesh is a decentralized data architecture where teams own and manage their data. It assigns ownership to business domains (e.g., finance, marketing, sales), providing a self-serve platform and federated governance. This enables autonomous development of tailored data services while ensuring a unified data experience across the organization."}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Domain Ownership"}),(0,s.jsx)("th",{children:"Data as a Product"}),(0,s.jsx)("th",{children:"Self-Serve Data Platform"}),(0,s.jsx)("th",{children:"Federated Governance"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Strategic Domain Driven Design"}),(0,s.jsx)("td",{children:"Domain Bounded Context"}),(0,s.jsx)("td",{children:"Product Thinking"}),(0,s.jsx)("td",{children:"Domain-Agnostic"}),(0,s.jsx)("td",{children:"Context-Mapping"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Socio-technical Perspective"}),(0,s.jsx)("td",{children:"Domain Teams"}),(0,s.jsx)("td",{children:"Data Product by Domain Team"}),(0,s.jsx)("td",{children:"Data Platform Team"}),(0,s.jsx)("td",{children:"Guild"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Technology"}),(0,s.jsx)("td",{children:"Operational & Analytical Data"}),(0,s.jsx)("td",{children:"Interoperability Interfaces"}),(0,s.jsx)("td",{children:"Self-Serve Data Platform"}),(0,s.jsx)("td",{children:"Data Governance & Automation"})]})]})]}),(0,s.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Domain-oriented"})," decentralized ownership: Business domains (e.g., customer service, marketing) own and manage their analytical and operational data services, tailoring data models to their needs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data as a product"}),": domain teams treat other domains as consumers, providing high-quality, secure, and up-to-date data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Self-service data infrastructure as a platform"}),": dedicated team provides tools for domains to autonomously consume, develop, deploy, and manage interoperable data products"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Federated computational governance"}),": centralized governance authority with embedded governance in each domain's processes, enabling autonomy while ensuring compliance"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"data-mesh-architecture",children:"Data Mesh Architecture"}),(0,s.jsx)(n.mermaid,{value:"flowchart LR\n  subgraph FederatedGovernnce [Federated Governance]\n    direction TB\n    interoperability(Interoperability Policy)\n    documentation(Documentation Policy)\n    security(Security Policy)\n    privacy(Privacy Policy)\n    compliance(Compliance Policy)\n  end\n\n  governanceGroup[[Governance Group]] e1@--\x3e|supports| FederatedGovernnce\n\n  subgraph selfServeDataPlatform [Self-Serve Data Platform]\n    direction TB\n    storageAndQueryEngine(Storage & Query Engine)\n    dataProductCatalog(Data Product Catalog)\n    dataContractManagement(Data Contract Management)\n    monitoring(Monitoring)\n    policyAutomation(Policy Automation)\n  end\n\n  dataPlatformTeam[[Data Platform Team]] e2@--\x3e|supports| selfServeDataPlatform\n\n  subgraph training [Training]\n    direction TB\n    consulting(Consulting)\n    examples(Examples)\n    bestPractices(Best Practices)\n  end\n\n  enablingTeam1[[Enabling Team]] e3@--\x3e|supports| training\n\n  subgraph domain1\n  end\n\n  subgraph domain2\n    direction LR\n    dataContract2(Data Contract)\n    dataProduct2(Data Product)\n    analytics2(Analytics)\n    operationalData2(Operational Data)\n\n    analytics2 e4@--\x3e|analyze| dataProduct2\n    operationalData2 e5@--\x3e|ingest| dataProduct2\n    dataProduct2 e6@--\x3e|publish| dataContract2\n  end\n\n  domain1 e7@--\x3e|use| dataContract2\n\n  domainTeam2[[Domain Team 2]] e8@----\x3e|supports| domain2\n  dataProduct2 e9@---\x3e|use| dataProduct3\n\n  subgraph domain3\n    direction TB\n    dataProduct3(Data Product)\n  end\n\n  e1@{ animate: true }\n  e2@{ animate: true }\n  e3@{ animate: true }\n  e4@{ animate: true }\n  e5@{ animate: true }\n  e6@{ animate: true }\n  e7@{ animate: true }\n  e8@{ animate: true }\n  e9@{ animate: true }"}),(0,s.jsx)(n.h2,{id:"data-product",children:"Data Product"}),(0,s.jsx)(n.mermaid,{value:"flowchart TB\n  subgraph DataProduct [Data Product]\n    direction TB\n    ownership(Ownership & Lifecycle)\n    transformation(Transformation Code)\n    tests(Tests)\n    documentation(Documentation)\n    dataStorage[(Data Storage)]\n    costManagement(Cost Management)\n    policies(Policies as Code)\n    cicd(CI/CD Pipeline)\n    observability(Observability)\n  end\n\n  discoveryPort(Discovery Port<br/>Metadata) e1@--\x3e DataProduct\n\n  inputPortOps(Input Port<br/>Operational Systems) e2@--\x3e DataProduct\n  inputPortData(Input Port<br/>Other Data Products over Data Contract) e3@--\x3e DataProduct\n\n  DataProduct e4@--\x3e outputPort1(Output Port<br/>Data Model & Technology)\n  DataProduct e5@--\x3e outputPort2(Output Port<br/>Data Model & Technology)\n\n  e1@{ animate: true }\n  e2@{ animate: true }\n  e3@{ animate: true }\n  e4@{ animate: true }\n  e5@{ animate: true }"}),(0,s.jsx)(n.h2,{id:"high-level-platform-design-and-governance",children:"High-level Platform Design and Governance"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(69727).A+""})}),(0,s.jsx)(n.h2,{id:"example",children:"Example"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(83301).A+""})})]}),(0,s.jsx)(a.A,{value:"governance-topologies",label:"Governance Topologies",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Fine-grained Fully Federated Mesh"}),(0,s.jsx)("th",{children:"Fine-grained Fully and Fully Governed Mesh"}),(0,s.jsx)("th",{children:"Hybrid Federated Mesh"}),(0,s.jsx)("th",{children:"Value Chain-Aligned Mesh"}),(0,s.jsx)("th",{children:"Coarse-grained Aligned Mesh"}),(0,s.jsx)("th",{children:"Coarse-grained and Governed Mesh"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Description"})}),(0,s.jsx)("td",{children:"Pure data mesh model with many small, independent deployable components, peer-to-peer data distribution, logically centralized governance metadata"}),(0,s.jsx)("td",{children:"Adds a central data distribution layer to fine-grained federated mesh for stronger governance and centralized data distribution"}),(0,s.jsx)("td",{children:"Combines federation and centralization. Central platform hosts/maintains data products; domain autonomy mainly in data consumption"}),(0,s.jsx)("td",{children:"Domains aligned along business value chains, working in close groups with autonomy but sharing central standards for cross-domain data"}),(0,s.jsx)("td",{children:"Large, coarse-grained domains, often as a result of mergers; domains contain many applications, organic growth leads to complexity"}),(0,s.jsx)("td",{children:"Similar to coarse-grained aligned mesh but with stronger governance features like addressing time-variant and non-volatile data concerns"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Visualization"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(48254).A+""})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(87259).A+""})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(72370).A+""})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(51583).A+""})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(51366).A+""})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.img,{src:t(87444).A+""})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Granularity"})}),(0,s.jsx)("td",{children:"Fine-grained data products, many small independent units"}),(0,s.jsx)("td",{children:"Fine-grained data products with centralized distribution layer"}),(0,s.jsx)("td",{children:"Hybrid: fine to moderate granularity; central platform more involved"}),(0,s.jsx)("td",{children:"Fine to moderate granularity aligned by value chains"}),(0,s.jsx)("td",{children:"Coarse-grained domains containing many applications"}),(0,s.jsx)("td",{children:"Coarse-grained domains with governed attributes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Governance Approach"})}),(0,s.jsx)("td",{children:"Federated with logically centralized metadata governance but mostly domain autonomy"}),(0,s.jsx)("td",{children:"Fully governed with central control over distribution and conformance"}),(0,s.jsx)("td",{children:"Governed but with domain autonomy in consumption; central platform manages creation/maintenance"}),(0,s.jsx)("td",{children:"Central standards for cross-domain data; requires architectural guidance"}),(0,s.jsx)("td",{children:"Strong governance policies necessary due to complexity"}),(0,s.jsx)("td",{children:"Fully governed with relaxed controls in large domains"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Data Distribution"})}),(0,s.jsx)("td",{children:"Peer-to-peer between domains; domains share data directly"}),(0,s.jsx)("td",{children:"Centralized data distribution via shared storage layer (domain-specific containers)"}),(0,s.jsx)("td",{children:"Domains create/manage data via central platform; consumes data autonomously"}),(0,s.jsx)("td",{children:"Aligned along value chains; domains share as needed with governance"}),(0,s.jsx)("td",{children:"Centralized/shared to manage complexity across coarse domains"}),(0,s.jsx)("td",{children:"Centralized/shared with governance controls for data quality"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Ownership"})}),(0,s.jsx)("td",{children:"Domain owns, manages, shares data independently"}),(0,s.jsx)("td",{children:"Clear boundaries with domain ownership but central distribution"}),(0,s.jsx)("td",{children:"Domain teams or platform team may own/manage data products depending on capability"}),(0,s.jsx)("td",{children:"Domains collaborate with autonomy within their value chain"}),(0,s.jsx)("td",{children:"Domain ownership but domains large and complex"}),(0,s.jsx)("td",{children:"Domains own data but comply with governance for consistency"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Complexity / Management"})}),(0,s.jsx)("td",{children:"High complexity managing many small data products; needs conformance agreement across domains"}),(0,s.jsx)("td",{children:"Higher complexity with governance and central controls; may slow time-to-market"}),(0,s.jsx)("td",{children:"Moderate complexity; need supporting platform and governance team to manage hybrid roles"}),(0,s.jsx)("td",{children:"Requires architectural coordination to define boundaries and standards clearly"}),(0,s.jsx)("td",{children:"High complexity due to coarse domains and multiple applications"}),(0,s.jsx)("td",{children:"High complexity with additional governance overhead"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Scalability"})}),(0,s.jsx)("td",{children:"Scales well horizontally but can be costly and resource-intensive due to duplication"}),(0,s.jsx)("td",{children:"Scales with strong conformance but may have coupling delays and cost overheads centralized"}),(0,s.jsx)("td",{children:"Scales with centralized platform efficiency and local domain agility"}),(0,s.jsx)("td",{children:"Scales by value chains enabling domain group specialization"}),(0,s.jsx)("td",{children:"Suited to large enterprises with many legacy systems and apps"}),(0,s.jsx)("td",{children:"Similar to coarse-grained aligned but with governance improves scale consistency"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Network / Infrastructure Impact"})}),(0,s.jsx)("td",{children:"Potential for heavy network utilization and infrastructure duplication"}),(0,s.jsx)("td",{children:"More efficient central infrastructure with shared storage and compute pools"}),(0,s.jsx)("td",{children:"Some reduction in duplication with central platform; moderate overhead"}),(0,s.jsx)("td",{children:"Balanced infrastructure demands due to group alignment"}),(0,s.jsx)("td",{children:"Infrastructure complexity due to large domain size and app count"}),(0,s.jsx)("td",{children:"Higher infrastructure cost but managed for compliance and quality"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Challenges & Risks"})}),(0,s.jsx)("td",{children:"Requires consensus on standards; potential data gravity vs decentralization conflict; costly infrastructure"}),(0,s.jsx)("td",{children:"Longer time to market, potential domain coupling; challenge in multi-cloud seamless governance"}),(0,s.jsx)("td",{children:"Management overhead with mixed governance; complex rules for data distribution"}),(0,s.jsx)("td",{children:"Need strong architectural guidance; boundaries may be fluid and require attention"}),(0,s.jsx)("td",{children:"Data alignment issues with domain boundaries; capability duplication"}),(0,s.jsx)("td",{children:"Balancing autonomy with strong governance may slow flexibility"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Governed Data Characteristics"})}),(0,s.jsx)("td",{children:"Metadata governance centralized, data governance mostly at domain level"}),(0,s.jsx)("td",{children:"Stronger data quality, compliance, and governance enforced centrally"}),(0,s.jsx)("td",{children:"Governance mixed: central for product creation, federated for consumption"}),(0,s.jsx)("td",{children:"Governance focuses on cross-domain data product standards"}),(0,s.jsx)("td",{children:"Governance policies critical due to scale and complexity"}),(0,s.jsx)("td",{children:"Governance addresses time-variant, compliance, and quality controls"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Use Cases"})}),(0,s.jsx)("td",{children:"Cloud-native, multi-cloud companies with many skilled engineers and high autonomy"}),(0,s.jsx)("td",{children:"Financial institutions, governments valuing compliance over agility"}),(0,s.jsx)("td",{children:"Organizations with legacy systems or lacking fully skilled teams; partial mesh"}),(0,s.jsx)("td",{children:"Organizations needing stream-alignment or hyper-specialized domain cooperation (e.g., supply chain)"}),(0,s.jsx)("td",{children:"Large enterprises with complex merged systems & applications"}),(0,s.jsx)("td",{children:"Large enterprises needing governance and compliance in complex domains"})]})]})]})})]})})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},69727:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/high-level-platform-design-05a9d3c884720c4db93c9f31350935fa.svg"},72370:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/hybrid-federated-mesh-95ee2b2a48fff7afa5b6fca57891f581.svg"},83301:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/example-d6dd0a7af877a514caa022ca2d556aa7.svg"},87259:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/fine-grained-fully-and-fully-governed-mesh-a1a688308199f7b4d4f1181c6b769345.svg"},87444:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/coarse-grained-and-governed-mesh-bc6c1aae43d6cbcad5f8cebf4cb7bc42.svg"}}]);