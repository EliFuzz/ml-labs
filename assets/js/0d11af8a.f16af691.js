"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[8161],{4906:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/sre-ec773fcf01320baf49f8333cc5746c21.svg"},9945:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/trunked-based-b134dd97d8b7239f83638b67e3422707.svg"},11998:(e,i,n)=>{n.d(i,{A:()=>l});n(59729);var r=n(13526);const s={tabItem:"tabItem_JZCZ"};var t=n(65813);function l({children:e,hidden:i,className:n}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,n),hidden:i,children:e})}},18456:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/gitlab-flow-2fdafbb3104c9b0b3853b0dfe155b87c.svg"},20508:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var r=n(59729);const s={},t=r.createContext(s);function l(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:i},e.children)}},20729:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"education/MLOps/git","title":"Git","description":"Git Overview","source":"@site/docs/education/09-MLOps/01-git.mdx","sourceDirName":"education/09-MLOps","slug":"/education/MLOps/git","permalink":"/ml-labs/docs/education/MLOps/git","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/ml-labs/docs/education/09-MLOps/01-git.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Git","description":"Git Overview","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"MLOps","permalink":"/ml-labs/docs/category/mlops"},"next":{"title":"Kubernetes","permalink":"/ml-labs/docs/education/MLOps/kubernetes"}}');var s=n(65813),t=n(20508),l=n(11998),a=n(34204);const c={title:"Git",description:"Git Overview",hide_table_of_contents:!0},d=void 0,o={},h=[{value:"Benefits",id:"benefits",level:3},{value:"Best Practices",id:"best-practices",level:3}];function u(e){const i={code:"code",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(a.A,{queryString:"primary",children:[(0,s.jsx)(l.A,{value:"inner-workflow",label:"Inner Workflow",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{style:{width:"50%",width:"650px"},children:"Git"}),(0,s.jsx)("th",{style:{width:"50%",width:"650px"},children:"Git Commands"})]})}),(0,s.jsx)("tbody",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(i.mermaid,{value:"graph TB\n\nsubgraph Local1 [Local]\ndirection BT\n\nlocalRepo1[(Local Repository)]\nstagingArea1[[Staging Area]]\nworkingDir1{{Working Directory}}\ndeveloper1(Developer)\n\ndeveloper1 e1@--\x3e |edit| workingDir1\nworkingDir1 e2@--\x3e |git add| stagingArea1\nstagingArea1 e3@--\x3e |git commit| localRepo1\nend\n\nsubgraph Local2 [Local]\ndirection BT\n\nlocalRepo2[(Local Repository)]\nstagingArea2[[Staging Area]]\nworkingDir2{{Working Directory}}\ndeveloper2(Developer)\n\ndeveloper2 e4@--\x3e |edit| workingDir2\nworkingDir2 e5@--\x3e |git add| stagingArea2\nstagingArea2 e6@--\x3e |git commit| localRepo2\nend\n\nsubgraph Remote\ndirection TB\n\nremote[(Remote Repository)]\nend\n\nLocal1 e7@--\x3e |git push| Remote\nRemote e8@--\x3e |git fetch| Local1\n\nLocal2 e9@--\x3e |git push| Remote\nRemote e10@--\x3e |git fetch| Local2\n\ne1@{ animate: true }\ne2@{ animate: true }\ne3@{ animate: true }\ne4@{ animate: true }\ne5@{ animate: true }\ne6@{ animate: true }\ne7@{ animate: true }\ne8@{ animate: true }\ne9@{ animate: true }\ne10@{ animate: true }"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.mermaid,{value:"sequenceDiagram\n\nparticipant Working Directory\nparticipant Staging Area\nparticipant Local Repository\nparticipant Remote Repository\n\nalt Push to Remote\nWorking Directory->>Staging Area: git add\nStaging Area->>Local Repository: git commit\nLocal Repository->>Remote Repository: git push\nend\n\nalt Merge\nRemote Repository->>Local Repository: git fetch\nLocal Repository->>Working Directory: git merge\nend\n\nalt Pull\nRemote Repository->>Working Directory: git pull\nend\n\nalt Checkout\nRemote Repository->>Local Repository: git clone\nLocal Repository->>Working Directory: git checkout\nend"})})]})})]})}),(0,s.jsxs)(l.A,{value:"ci-cd",label:"CI/CD",children:[(0,s.jsx)(i.mermaid,{value:"graph LR\n\nsubgraph agile[Agile Development]\ndirection LR\n\nplan(Plan) e1@--\x3e code(Code) e2@--\x3e build(Build)\nend\n\nsubgraph integration[Continuous Integration]\ndirection LR\n\nintegrate(Integrate) e3@--\x3e test(Test)\nend\n\nsubgraph delivery[Continuous Delivery]\ndirection LR\n\nrelease(Release)\nend\n\nsubgraph deployment[Continuous Deployment]\ndirection LR\n\ndeploy(Deploy)\nend\n\nagile e4@--\x3e integration e5@--\x3e delivery e6@--\x3e deployment\n\ne1@{ animate: true }\ne2@{ animate: true }\ne3@{ animate: true }\ne4@{ animate: true }\ne5@{ animate: true }\ne6@{ animate: true }"}),(0,s.jsx)(i.h3,{id:"benefits",children:"Benefits"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Higher efficiency"}),"\n",(0,s.jsx)(i.li,{children:"Reduced risk of defects"}),"\n",(0,s.jsx)(i.li,{children:"Faster product delivery"}),"\n",(0,s.jsx)(i.li,{children:"Log generation"}),"\n",(0,s.jsx)(i.li,{children:"Rollback"}),"\n"]})]}),(0,s.jsxs)(l.A,{value:"git-branching-strategies",label:"Branching Strategies",children:[(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Strategy"}),(0,s.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Branches"}),(0,s.jsx)("th",{children:"Pros"}),(0,s.jsx)("th",{children:"Cons"}),(0,s.jsx)("th",{children:"Use Cases"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Git Flow"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(88504).A+"",width:"1639",height:"547"})}),(0,s.jsxs)("td",{children:["Complex branching strategy for parallel development. Developers create ",(0,s.jsx)(i.code,{children:"feature"})," branches from a ",(0,s.jsx)(i.code,{children:"develop"})," branch, then merge them back for ",(0,s.jsx)(i.code,{children:"release"}),". It uses multiple branch types: ",(0,s.jsx)(i.code,{children:"master"}),", ",(0,s.jsx)(i.code,{children:"develop"}),", ",(0,s.jsx)(i.code,{children:"feature"}),", ",(0,s.jsx)(i.code,{children:"release"}),", and ",(0,s.jsx)(i.code,{children:"hotfix"}),". ",(0,s.jsx)(i.code,{children:"Master"})," and ",(0,s.jsx)(i.code,{children:"develop"})," are long-lived, while others are short-lived and for supporting development"]}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"master"}),": Stable production code"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"develop"}),": Ongoing development"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"feature"}),": New features (short-lived)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"release"}),": Preparing for release (from develop)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"hotfix"}),": Urgent bug fixes (from master)"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Stable releases: separate ",(0,s.jsx)(i.code,{children:"dev"})," branches protect ",(0,s.jsx)(i.code,{children:"main"})," branch"]}),(0,s.jsx)("li",{children:"Organized work: clear branch types for specific tasks"}),(0,s.jsx)("li",{children:"Manages multiple versions"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Complex merging: multiple branches to manage"}),(0,s.jsx)("li",{children:"Debugging difficulty: many commits make finding issues hard"}),(0,s.jsx)("li",{children:"Slower development: complexity slows down process"})]})}),(0,s.jsx)("td",{children:"Large teams, complex projects"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"GitHub Flow"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(66872).A+"",width:"563",height:"199"})}),(0,s.jsxs)("td",{children:["No ",(0,s.jsx)(i.code,{children:"release"})," branches. Developers work on ",(0,s.jsx)(i.code,{children:"feature"})," branches from ",(0,s.jsx)(i.code,{children:"main"}),", then merge back and delete the branch. ",(0,s.jsx)(i.code,{children:"Main"})," branch stays deployable"]}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"main"}),": Production-ready code"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Fast, streamlined: Agile principles, short cycles, frequent releases"}),(0,s.jsx)("li",{children:"Faster feedback: quick identification and resolution of issues"}),(0,s.jsx)("li",{children:"Efficient deploys: single branch for testing/automation"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"No multiple versions"}),(0,s.jsxs)("li",{children:["Unstable code risk: no ",(0,s.jsx)(i.code,{children:"dev"})," branch, requires thorough testing"]}),(0,s.jsx)("li",{children:"Merge conflicts: for larger teams & transparency issues"})]})}),(0,s.jsx)("td",{children:"Small teams, rapid development"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"GitLab Flow"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(18456).A+"",width:"413",height:"207"})}),(0,s.jsxs)("td",{children:["Simplifies branching with direct ",(0,s.jsx)(i.code,{children:"main"})," branch use. Great in multi-environment development, isolating versions and prioritizing stability with internal testing before production deployments"]}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"master"}),": Production-ready code"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"environments"}),": staging / testing/ pre-production / production"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Good balance between simplicity and release management"})})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Requires strong emphasis on CI/CD practices"})})}),(0,s.jsx)("td",{children:"Small teams, rapid development"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Trunked Based"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(9945).A+"",width:"563",height:"211"})}),(0,s.jsxs)("td",{children:["Developers commit directly to a shared, always-releasable ",(0,s.jsx)(i.code,{children:"trunk"})," multiple times a day. This fosters CI/CD by enabling frequent integration and faster releases. ",(0,s.jsx)("b",{children:"Feature flags"})," help by decoupling deployment from release, keeping unfinished features hidden while complete ones are released quickly"]}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"trunk"}),": Single branch for all development"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("b",{children:"feature"}),": New features and bug fixes (short-lived)"]})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Enables CI with frequent trunk updates"}),(0,s.jsx)("li",{children:"Improves collaboration with direct trunk commits (better visibility)"}),(0,s.jsx)("li",{children:"Reduces merge conflicts with frequent small pushes"}),(0,s.jsx)("li",{children:"Faster releases with constantly releasable trunk"})]})}),(0,s.jsx)("td",{children:(0,s.jsx)("ul",{children:(0,s.jsx)("li",{children:"Requires experienced devs for shared trunk management"})})}),(0,s.jsx)("td",{children:"Continuous delivery pipelines"})]})]})]}),(0,s.jsx)(i.h3,{id:"best-practices",children:"Best Practices"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Keep branch strategy simple","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Use feature branches for your work: Use ",(0,s.jsx)(i.code,{children:"feature"})," branches for all new features and bug fixes"]}),"\n",(0,s.jsxs)(i.li,{children:["Name your feature branches by convention","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"users/username/work-item"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"bugfix/work-item"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"feature/feature-name"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"feature/feature-area/feature-name"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"hotfix/description"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Use feature flags to manage long-running branches"}),"\n",(0,s.jsxs)(i.li,{children:["Merge ",(0,s.jsx)(i.code,{children:"feature"})," branches into the ",(0,s.jsx)(i.code,{children:"main"})," branch using pull requests"]}),"\n",(0,s.jsxs)(i.li,{children:["Keep a high quality, up-to-date ",(0,s.jsx)(i.code,{children:"main"})," branch"]}),"\n",(0,s.jsxs)(i.li,{children:["Manage releases","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Use release branches & omit using tags for releases: Tags for releases add complexity. They require extra steps and can be missed, causing issues for developers. Release branches offer a simpler workflow"}),"\n",(0,s.jsx)(i.li,{children:"Port changes back to the main branch"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),(0,s.jsx)(l.A,{value:"git-workflow",label:"Git Workflow",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Workflow"}),(0,s.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,s.jsx)("th",{children:"Definition"}),(0,s.jsx)("th",{children:"Impact on History"}),(0,s.jsx)("th",{children:"Use Cases"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Merge"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(21673).A+"",width:"433",height:"117"})}),(0,s.jsx)("td",{children:"Combines changes from one branch into another"}),(0,s.jsx)("td",{children:"Preserves the commit history of both branches"}),(0,s.jsx)("td",{children:"Integrating changes from feature branches"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Rebase"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(51323).A+"",width:"558",height:"124"})}),(0,s.jsx)("td",{children:"Transfers commits from one branch to another, maintaining a linear history"}),(0,s.jsx)("td",{children:"Rewrites the commit history, making it linear and removes original branch's existence"}),(0,s.jsx)("td",{children:"Preferred for creating a clean and linear history, often used for feature branches before merging"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Squash"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(46328).A+"",width:"433",height:"117"})}),(0,s.jsx)("td",{children:"Condenses multiple commits into a single commit"}),(0,s.jsx)("td",{children:"Creates a new commit with a concise history"}),(0,s.jsx)("td",{children:"For cleaning up history before merging into the main branch, especially for pull requests"})]})]})]})}),(0,s.jsx)(l.A,{value:"roles-responsibilities",label:"Roles & Responsibilities",children:(0,s.jsxs)("table",{className:"text_vertical",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Role"}),(0,s.jsx)("th",{style:{minWidth:"350px"},children:"Visualization"}),(0,s.jsx)("th",{children:"Focus"}),(0,s.jsx)("th",{children:"Goals"}),(0,s.jsx)("th",{children:"Responsibilities"}),(0,s.jsx)("th",{children:"Key Metrics"}),(0,s.jsx)("th",{children:"Challenges"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"DevOps"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(93913).A+"",width:"628",height:"209"})}),(0,s.jsx)("td",{children:"Collaboration & Automation of Dev & Ops"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Faster software delivery"}),(0,s.jsx)("li",{children:"Improved communication & collaboration"}),(0,s.jsx)("li",{children:"Reduced silos between Dev & Ops"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Automating infrastructure provisioning and configuration"}),(0,s.jsx)("li",{children:"Managing deployment pipelines"}),(0,s.jsx)("li",{children:"Monitoring system performance"}),(0,s.jsx)("li",{children:"Facilitating collaboration between development and operations teams"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Mean Time to Deploy (MTTD)"}),(0,s.jsx)("li",{children:"Mean Time to Recovery (MTTR)"}),(0,s.jsx)("li",{children:"Change Failure Rate (CFR)"}),(0,s.jsx)("li",{children:"Deployment Frequency"}),(0,s.jsx)("li",{children:"Lead Time for Changes"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Siloed organizational culture"}),(0,s.jsx)("li",{children:"Resistance to change"}),(0,s.jsx)("li",{children:"Tool sprawl"}),(0,s.jsx)("li",{children:"Lack of collaboration and communication between teams"}),(0,s.jsx)("li",{children:"Balancing speed of delivery with stability and reliability"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Site Reliability Engineer (SRE)"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(4906).A+"",width:"552",height:"319"})}),(0,s.jsx)("td",{children:"Application Reliability & Performance"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"High availability & scalability"}),(0,s.jsx)("li",{children:"Reduced downtime"}),(0,s.jsx)("li",{children:"Improved incident response"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Setting and enforcing reliability targets"}),(0,s.jsx)("li",{children:"Defining Service Level Objectives (SLOs) and Service Level Indicators (SLIs)"}),(0,s.jsx)("li",{children:"Designing and implementing monitoring and alerting systems"}),(0,s.jsx)("li",{children:"Conducting postmortems and root cause analysis"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Service Level Objectives (SLOs)"}),(0,s.jsx)("li",{children:"Service Level Indicators (SLIs)"}),(0,s.jsx)("li",{children:"Error Budgets"}),(0,s.jsx)("li",{children:"Availability"}),(0,s.jsx)("li",{children:"Reliability"}),(0,s.jsx)("li",{children:"Incident Response Time"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Balancing feature development with reliability improvements"}),(0,s.jsx)("li",{children:"Managing complex distributed systems"}),(0,s.jsx)("li",{children:"Dealing with alert fatigue and false positives"}),(0,s.jsx)("li",{children:"Aligning incentives between development and operations teams"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("b",{children:"Platform Engineering"})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.img,{src:n(87417).A+"",width:"523",height:"214"})}),(0,s.jsx)("td",{children:"Building & Maintaining Developer Platform"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Streamlined development workflow"}),(0,s.jsx)("li",{children:"Self-service infrastructure for developers"}),(0,s.jsx)("li",{children:"Increased developer productivity"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Designing and implementing scalable and resilient infrastructure"}),(0,s.jsx)("li",{children:"Managing cloud resources"}),(0,s.jsx)("li",{children:"Building and maintaining internal platforms and tooling"}),(0,s.jsx)("li",{children:"Providing support for development teams"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Infrastructure Availability"}),(0,s.jsx)("li",{children:"Scalability"}),(0,s.jsx)("li",{children:"Performance"}),(0,s.jsx)("li",{children:"Cost Efficiency"}),(0,s.jsx)("li",{children:"Time to Provision Resources"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Managing infrastructure complexity at scale"}),(0,s.jsx)("li",{children:"Optimizing resource utilization and cost"}),(0,s.jsx)("li",{children:"Ensuring security and compliance requirements are met"}),(0,s.jsx)("li",{children:"Evolving platform capabilities to support changing business needs"})]})})]})]})]})})]})}function x(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},21673:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/git-merge-fe47794aeb98b26c6614827c1e3e5fcc.svg"},34204:(e,i,n)=>{n.d(i,{A:()=>w});var r=n(59729),s=n(13526),t=n(7267),l=n(25470),a=n(96177),c=n(63188),d=n(22301),o=n(47714);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:i,children:n}=e;return(0,r.useMemo)((()=>{const e=i??function(e){return h(e).map((({props:{value:e,label:i,attributes:n,default:r}})=>({value:e,label:i,attributes:n,default:r})))}(n);return function(e){const i=(0,d.XI)(e,((e,i)=>e.value===i.value));if(i.length>0)throw new Error(`Docusaurus error: Duplicate values "${i.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[i,n])}function x({value:e,tabValues:i}){return i.some((i=>i.value===e))}function j({queryString:e=!1,groupId:i}){const n=(0,l.W6)(),s=function({queryString:e=!1,groupId:i}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:e,groupId:i});return[(0,c.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const i=new URLSearchParams(n.location.search);i.set(s,e),n.replace({...n.location,search:i.toString()})}),[s,n])]}function m(e){const{defaultValue:i,queryString:n=!1,groupId:s}=e,t=u(e),[l,c]=(0,r.useState)((()=>function({defaultValue:e,tabValues:i}){if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=i.find((e=>e.default))??i[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:i,tabValues:t}))),[d,h]=j({queryString:n,groupId:s}),[m,g]=function({groupId:e}){const i=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,s]=(0,o.Dv)(i);return[n,(0,r.useCallback)((e=>{i&&s.set(e)}),[i,s])]}({groupId:s}),p=(()=>{const e=d??m;return x({value:e,tabValues:t})?e:null})();(0,a.A)((()=>{p&&c(p)}),[p]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!x({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),g(e)}),[h,g,t]),tabValues:t}}var g=n(83891);const p={tabList:"tabList_Mt30",tabItem:"tabItem_dm4R"};var b=n(65813);function f({className:e,block:i,selectedValue:n,selectValue:r,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,t.a_)(),d=e=>{const i=e.currentTarget,s=a.indexOf(i),t=l[s].value;t!==n&&(c(i),r(t))},o=e=>{let i=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;i=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;i=a[n]??a[a.length-1];break}}i?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":i},e),children:l.map((({value:e,label:i,attributes:r})=>(0,b.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{a.push(e)},onKeyDown:o,onClick:d,...r,className:(0,s.A)("tabs__item",p.tabItem,r?.className,{"tabs__item--active":n===e}),children:i??e},e)))})}function v({lazy:e,children:i,selectedValue:n}){const t=(Array.isArray(i)?i:[i]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:t.map(((e,i)=>(0,r.cloneElement)(e,{key:i,hidden:e.props.value!==n})))})}function y(e){const i=m(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",p.tabList),children:[(0,b.jsx)(f,{...i,...e}),(0,b.jsx)(v,{...i,...e})]})}function w(e){const i=(0,g.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(i))}},46328:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/git-squash-1ab480809a45c8a8e140100cfeb16e36.svg"},51323:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/git-rebase-c6a3b41da411921f84fb545682e9c965.svg"},66872:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/github-flow-4c3b2958b48f3bb0541766e7632254d0.svg"},87417:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/platform-engineering-5cb87a5d293d5b45753572c21991698c.svg"},88504:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/git-flow-f10e54db843c29dc4c544a9da9af6045.svg"},93913:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/devops-515f0451d9ebb473edcdbf22bc4eadd3.svg"}}]);