"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9157],{508:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(9729);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},1998:(e,n,t)=>{t.d(n,{A:()=>a});t(9729);var s=t(3526);const r={tabItem:"tabItem_JZCZ"};var i=t(8194);function a({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,t),hidden:n,children:e})}},4204:(e,n,t)=>{t.d(n,{A:()=>w});var s=t(9729),r=t(3526),i=t(7267),a=t(5470),o=t(6177),l=t(3188),d=t(2301),c=t(7714);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s})))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m({value:e,tabValues:n}){return n.some((n=>n.value===e))}function p({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=u(e),[a,l]=(0,s.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,h]=p({queryString:t,groupId:r}),[x,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,c.Dv)(n);return[t,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),j=(()=>{const e=d??x;return m({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,i]),tabValues:i}}var f=t(3891);const j={tabList:"tabList_Mt30",tabItem:"tabItem_dm4R"};var g=t(8194);function y({className:e,block:n,selectedValue:t,selectValue:s,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,r=o.indexOf(n),i=a[r].value;i!==t&&(l(n),s(i))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:s})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:d,...s,className:(0,r.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===t));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function _(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function w(e){const n=(0,f.A)();return(0,g.jsx)(_,{...e,children:h(e.children)},String(n))}},9730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"education/Python/fundamentals","title":"Fundamentals","description":"Learn the fundamentals of Python programming, including syntax, data types, control flow, functions, and modules.","source":"@site/docs/education/02-Python/01-fundamentals.mdx","sourceDirName":"education/02-Python","slug":"/education/Python/fundamentals","permalink":"/ml-labs/docs/education/Python/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/ml-labs/docs/education/02-Python/01-fundamentals.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Fundamentals","description":"Learn the fundamentals of Python programming, including syntax, data types, control flow, functions, and modules.","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Python","permalink":"/ml-labs/docs/category/python"},"next":{"title":"Database","permalink":"/ml-labs/docs/category/database"}}');var r=t(8194),i=t(508),a=t(1998),o=t(4204);const l={title:"Fundamentals",description:"Learn the fundamentals of Python programming, including syntax, data types, control flow, functions, and modules.",hide_table_of_contents:!0},d=void 0,c={},h=[{value:"Naming Conventions",id:"naming-conventions",level:2}];function u(e){const n={code:"code",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(o.A,{queryString:"primary",children:[(0,r.jsxs)(a.A,{value:"internals",label:"Internals",children:[(0,r.jsxs)(n.p,{children:["Python is an OOP, interpreted language that uses modular code. Standard implementation: ",(0,r.jsx)(n.code,{children:"cpython"}),"."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Internal working of Python"})}),(0,r.jsx)(n.mermaid,{value:'graph LR\n    CodeEditor(Code Editor) e1@--\x3e|1.Write Code| SourceFile("Source File (.py)")\n    SourceFile e2@--\x3e|2.Save File| Compiler(Compiler)\n\n    subgraph PythonInterpreter [Python Interpreter]\n        Compiler e3@--\x3e|3.Compile to Bytecode| Bytecode("Bytecode (.pyc)")\n        Bytecode e4@--\x3e|4.Execute| PVM("PVM")\n    end\n    PVM e5@--\x3e|5.Machine Code| RunningProgram("Running Program")\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }'}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Steps Involved in Python Execution"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Python compiler reads the source code from the editor, initiating execution"}),"\n",(0,r.jsxs)(n.li,{children:["Code is saved as a ",(0,r.jsx)(n.code,{children:".py"})," file with system instructions"]}),"\n",(0,r.jsxs)(n.li,{children:["Compilation converts source code to bytecode, checking for syntax errors and generating a ",(0,r.jsx)(n.code,{children:".pyc"})," file"]}),"\n",(0,r.jsx)(n.li,{children:"Bytecode is sent to PVM (Python Virtual Machine), which converts it to machine-executable code, executing line by line and halting on errors"}),"\n",(0,r.jsx)(n.li,{children:"Within PVM, bytecode becomes machine code (binary 0s and 1s), optimized for the CPU"}),"\n",(0,r.jsx)(n.li,{children:"CPU executes the machine code, producing the program's output"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Global Interpreter Lock (GIL)"})}),(0,r.jsx)(n.p,{children:"In CPython, the GIL is a mutex allowing only 1 thread to execute Python bytecode at a time, ensuring thread safety for reference counting memory management. Ongoing efforts aim to remove the GIL for better performance."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Benefits: Simplifies memory management, C extension integration, and interpreter complexity."}),"\n",(0,r.jsx)(n.li,{children:"Drawbacks: Limits CPU-bound multi-threaded parallelism on multi-cores; I/O-bound tasks less affected (GIL released during waits). Use multiprocessing for parallelism."}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compiler vs. Interpreter"})}),(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Compiler"}),(0,r.jsx)("th",{children:"Interpreter"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Faster; conversion before execution"}),(0,r.jsx)("td",{children:"Slower; simultaneous execution"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Errors detected before execution"}),(0,r.jsx)("td",{children:"Errors at runtime"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Needs recompilation for different machines"}),(0,r.jsx)("td",{children:"Portable with interpreter"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Requires more memory for full translation"}),(0,r.jsx)("td",{children:"Requires less memory"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Debugging complex due to batch processing"}),(0,r.jsx)("td",{children:"Debugging easier with line-by-line execution"})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Garbage Collection"})}),(0,r.jsx)(n.p,{children:"Python's memory management relies on automatic mechanisms: reference counting and garbage collection. Reference counting tracks object references and deallocates memory when a count reaches zero. However, it fails with cyclic references (objects referencing each other)."}),(0,r.jsxs)(n.p,{children:["To handle cycles, Python uses a generational garbage collector that groups objects by age into three generations, collecting younger ones more frequently for efficiency. It runs automatically based on allocation thresholds but can be manually triggered via the ",(0,r.jsx)(n.code,{children:"gc"})," module."]}),(0,r.jsx)(n.p,{children:"This dual approach ensures efficient, automatic memory handling, minimizing manual overhead."})]}),(0,r.jsxs)(a.A,{value:"package-management",label:"Package Management",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Python packages"})," is a way to organize related Python modules (files with reusable code) in one directory, making code easier to reuse and distribute."]}),(0,r.jsxs)(n.p,{children:["Package is a directory containing at least one module (",(0,r.jsx)(n.code,{children:".py"})," file) or can contain multiple modules, sub-packages (nested directories) and a special ",(0,r.jsx)(n.code,{children:"__init__.py"})," file. Without ",(0,r.jsx)(n.code,{children:"__init__.py"})," file, directories aren't treated as packages (except for namespace packages in Python 3.3+)."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"my_package/\n    __init__.py\n    module_one.py\n    module_two.py\n"})}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Feature"}),(0,r.jsxs)("th",{children:["Module (",(0,r.jsx)(n.code,{children:".py file"}),")"]}),(0,r.jsx)("th",{children:"Package (directory)"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Structure"})}),(0,r.jsx)("td",{children:"Flat structure; single file"}),(0,r.jsx)("td",{children:"Hierarchical structure; can contain sub-packages and multiple modules"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Purpose"})}),(0,r.jsx)("td",{children:"Code reuse, single topic"}),(0,r.jsx)("td",{children:"Organizing large projects"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Namespace"})}),(0,r.jsx)("td",{children:"Provides a single namespace for its contents"}),(0,r.jsx)("td",{children:"Provides a separate namespace for its modules, preventing name conflicts"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Importing"})}),(0,r.jsxs)("td",{children:["Imported directly using the module name (e.g., ",(0,r.jsx)(n.code,{children:"import module_one"}),")"]}),(0,r.jsxs)("td",{children:["Imported using the package name followed by the module name (e.g., ",(0,r.jsx)(n.code,{children:"from my_package import module_one"}),", ",(0,r.jsx)(n.code,{children:"import my_package.module_one"}),")"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Initialization"})}),(0,r.jsx)("td",{children:"No special initialization required"}),(0,r.jsxs)("td",{children:["The ",(0,r.jsx)(n.code,{children:"__init__.py"})," file can contain initialization code for the package"]})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Python Package Ecosystem"})}),(0,r.jsx)(n.p,{children:"The Python package ecosystem enables developers to publish, share, discover, and install reusable code libraries. Its foundation is PyPI, the primary repository for open-source packages. Community standards and formal proposals (PEPs) govern package formats, distribution, and installation, promoting compatibility across tools and platforms."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Package Management Tools"})}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"pip"})}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"conda"})}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"Poetry"})}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"Pipenv"})}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"uv"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Environments"}),(0,r.jsx)("td",{children:"venv, virtualenv"}),(0,r.jsx)("td",{children:"native"}),(0,r.jsx)("td",{children:"built-in/env"}),(0,r.jsx)("td",{children:"built-in/env"}),(0,r.jsx)("td",{children:"built-in/env, venv"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Dependency Management"})}),(0,r.jsx)("td",{children:"requirements.txt, direct install"}),(0,r.jsx)("td",{children:"environment.yml, conda install"}),(0,r.jsx)("td",{children:"pyproject.toml, poetry.lock"}),(0,r.jsx)("td",{children:"Pipfile, Pipfile.lock"}),(0,r.jsx)("td",{children:"pyproject/requirements.lock"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Speed"})}),(0,r.jsx)("td",{children:"standard"}),(0,r.jsx)("td",{children:"slower"}),(0,r.jsx)("td",{children:"moderate"}),(0,r.jsx)("td",{children:"moderate"}),(0,r.jsx)("td",{children:"fastest"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Non-Python Support"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"\u274c"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Lockfile Support"})}),(0,r.jsx)("td",{children:"partial (via pip-tools)"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"yes (requirements.lock)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Typical Usage"})}),(0,r.jsx)("td",{children:"basic projects, scripts"}),(0,r.jsx)("td",{children:"data science, cross-lang"}),(0,r.jsx)("td",{children:"modern Python projects"}),(0,r.jsx)("td",{children:"intermediate projects"}),(0,r.jsx)("td",{children:"large/modern projects"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Pros"})}),(0,r.jsx)("td",{children:"simple, direct PyPI access"}),(0,r.jsx)("td",{children:"handles non-Python packages"}),(0,r.jsx)("td",{children:"modern, organized, isolated"}),(0,r.jsx)("td",{children:"integrates pip+env, easy to use"}),(0,r.jsx)("td",{children:"fast, automatic Python version"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Cons"})}),(0,r.jsx)("td",{children:"no environment isolation, manual lockfile"}),(0,r.jsx)("td",{children:"heavyweight, slower, not pure Python"}),(0,r.jsx)("td",{children:"no non-Python deps, native lockfile only"}),(0,r.jsx)("td",{children:"fewer updates, sometimes buggy"}),(0,r.jsx)("td",{children:"newer, less mature, Python-only"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Best For"})}),(0,r.jsx)("td",{children:"simple/small scripts"}),(0,r.jsx)("td",{children:"data/data science"}),(0,r.jsx)("td",{children:"robust apps/libraries"}),(0,r.jsx)("td",{children:"basic to moderate apps"}),(0,r.jsx)("td",{children:"fast prototyping, deployment"})]})]})]})]}),(0,r.jsxs)(a.A,{value:"naming-conventions",label:"Naming Conventions",children:[(0,r.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"name must start with a letter or the underscore character"}),"\n",(0,r.jsx)(n.li,{children:"name cannot start with a number"}),"\n",(0,r.jsxs)(n.li,{children:["name can only contain alpha-numeric characters and underscores ",(0,r.jsx)(n.code,{children:"[A-Za-z0-9_]"})]}),"\n",(0,r.jsx)(n.li,{children:"names are case-sensitive (firstname, Firstname, FirstName and FIRSTNAME) are different variables"}),"\n"]}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Convention"}),(0,r.jsx)("th",{children:"Use Cases"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"snake_case"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"variable names"}),": ",(0,r.jsx)(n.code,{children:"first_name"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"attribute names"}),": ",(0,r.jsx)(n.code,{children:"self.user_id"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"function names"}),": ",(0,r.jsx)(n.code,{children:"def get_user_info()"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"method names"}),": ",(0,r.jsx)(n.code,{children:"def calculate_total(self)"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"parameter names"}),": ",(0,r.jsx)(n.code,{children:"def send_email(to_address)"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"module names"}),": ",(0,r.jsx)(n.code,{children:"user_profile.py"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"decorator names"}),": ",(0,r.jsx)(n.code,{children:"@login_required"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"package names"}),": ",(0,r.jsx)(n.code,{children:"my_package"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"file names"}),": ",(0,r.jsx)(n.code,{children:"data_processor.py"})]})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"PascalCase"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"class names"}),": ",(0,r.jsx)(n.code,{children:"class UserProfile:"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"exception names"}),": ",(0,r.jsx)(n.code,{children:"class UserNotFoundError(Exception):"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"interface names"}),": ",(0,r.jsx)(n.code,{children:"class IUser:"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"enum names"}),": ",(0,r.jsx)(n.code,{children:"class UserRole(Enum):"})]})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"UPPER_CASE"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"constant names"}),": ",(0,r.jsx)(n.code,{children:"MAX_RETRIES = 5"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"global variables"}),": ",(0,r.jsx)(n.code,{children:'API_URL = "https://api.example.com"'})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"environment variables"}),": ",(0,r.jsx)(n.code,{children:'DATABASE_URL = "postgres://user:pass@localhost/dbname"'})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"configuration settings"}),": ",(0,r.jsx)(n.code,{children:"DEBUG = True"})]})]})})]})]})]})]}),(0,r.jsxs)(a.A,{value:"syntax",label:"Syntax",children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Comments"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Single line comments start with a number symbol.\n\n""" Multiline strings can be written\n    using three "s, and are often used\n    as documentation.\n"""\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Primitive Datatypes and Operators"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# You have numbers\n3  # => 3\n\n# Math is what you would expect\n1 + 1   # => 2\n8 - 1   # => 7\n10 * 2  # => 20\n35 / 5  # => 7.0\n\n# Floor division rounds towards negative infinity\n5 // 3       # => 1\n-5 // 3      # => -2\n5.0 // 3.0   # => 1.0  # works on floats too\n-5.0 // 3.0  # => -2.0\n\n# The result of division is always a float\n10.0 / 3  # => 3.3333333333333335\n\n# Modulo operation\n7 % 3   # => 1\n# i % j have the same sign as j, unlike C\n-7 % 3  # => 2\n\n# Exponentiation (x**y, x to the yth power)\n2**3  # => 8\n\n# Enforce precedence with parentheses\n1 + 3 * 2    # => 7\n(1 + 3) * 2  # => 8\n\n# Boolean values are primitives (Note: the capitalization)\nTrue   # => True\nFalse  # => False\n\n# negate with not\nnot True   # => False\nnot False  # => True\n\n# Boolean Operators\n# Note "and" and "or" are case-sensitive\nTrue and False  # => False\nFalse or True   # => True\n\n# True and False are actually 1 and 0 but with different keywords\nTrue + True  # => 2\nTrue * 8     # => 8\nFalse - 5    # => -5\n\n# Comparison operators look at the numerical value of True and False\n0 == False   # => True\n2 > True     # => True\n2 == True    # => False\n-5 != False  # => True\n\n# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.\n# All other values are True\nbool(0)      # => False\nbool("")     # => False\nbool([])     # => False\nbool({})     # => False\nbool(())     # => False\nbool(set())  # => False\nbool(4)      # => True\nbool(-6)     # => True\n\n# Using boolean logical operators on ints casts them to booleans for evaluation,\n# but their non-cast value is returned. Don\'t mix up with bool(ints) and bitwise\n# and/or (&,|)\nbool(0)   # => False\nbool(2)   # => True\n0 and 2   # => 0\nbool(-5)  # => True\nbool(2)   # => True\n-5 or 0   # => -5\n\n# Equality is ==\n1 == 1  # => True\n2 == 1  # => False\n\n# Inequality is !=\n1 != 1  # => False\n2 != 1  # => True\n\n# More comparisons\n1 < 10  # => True\n1 > 10  # => False\n2 <= 2  # => True\n2 >= 2  # => True\n\n# Seeing whether a value is in a range\n1 < 2 and 2 < 3  # => True\n2 < 3 and 3 < 2  # => False\n# Chaining makes this look nicer\n1 < 2 < 3  # => True\n2 < 3 < 2  # => False\n\n# (is vs. ==) is checks if two variables refer to the same object, but == checks\n# if the objects pointed to have the same values.\na = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a\'s and b\'s objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a\'s and b\'s objects are equal\n\n# Strings are created with " or \'\n"This is a string."\n\'This is also a string.\'\n\n# Strings can be added too\n"Hello " + "world!"  # => "Hello world!"\n# String literals (but not variables) can be concatenated without using \'+\'\n"Hello " "world!"    # => "Hello world!"\n\n# A string can be treated like a list of characters\n"Hello world!"[0]  # => \'H\'\n\n# You can find the length of a string\nlen("This is a string")  # => 16\n\n# Since Python 3.6, you can use f-strings or formatted string literals.\nname = "Joe"\nf"He said his name is {name}."  # => "He said his name is Joe"\n# Any valid Python expression inside these braces is returned to the string.\nf"{name} is {len(name)} characters long."  # => "Joe is 3 characters long."\n\nnum = 1000000\nprint(f"{num:,}")  # => "1,000,000"\nprint(f"{num:_}")  # => "1_000_000"\n\nstr = "name"\nprint(f"{str:^20}")   # => "        name        "\nprint(f"{str:|^20}")  # => "||||||||name||||||||"\nprint(f"{str:>20}")   # => "                name"\nprint(f"{str:<20}:")  # => "name                :"\nprint(f"{str:20}:")   # => "name                :"\n\ndate = datetime.now()\nprint(f"{date:%Y-%m-%d}")  # => "2023-10-05"\nprint(f"{date:%c}")  # local datetime: => "Wed Jan 01 01:00:00 2025"\n\nfloat_num = 3.141\nprint(f"{float_num:.2f}")  # => "3.14"\n\na = 5\nb = 10\nprint(f"a + b = {a + b}") # => "a + b = 15"\nprint(f"{a + b = }")      # => "a + b = 15"\n\n# None is an object\nNone  # => None\n\n# Don\'t use the equality "==" symbol to compare objects to None\n# Use "is" instead. This checks for equality of object identity.\n"etc" is None  # => False\nNone is None   # => True\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Variables and Collections"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Python has a print function\nprint("I\'m Python")  # => I\'m Python\n\n# By default the print function also prints out a newline at the end.\n# Use the optional argument end to change the end string.\nprint("Hello, World", end="!")  # => Hello, World!\n\n# Simple way to get input data from console\ninput_string_var = input("Enter some data: ")  # Returns the data as a string\n\n# There are no declarations, only assignments.\nsome_var = 5\nsome_var  # => 5\n\n# Accessing a previously unassigned variable is an exception.\nsome_unknown_var  # Raises a NameError\n\n# if can be used as an expression\n# Equivalent of C\'s \'?:\' ternary operator\n"yes" if 0 > 1 else "no"  # => "no"\n\n# Lists store sequences\nli = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(3)    # li is now [1, 2, 3]\nli.append(4)    # li is now [1, 2, 3, 4]\n# Remove from the end with pop\nli.pop()        # => 4 and li is now [1, 2, 3]\n# Let\'s put it back\nli.append(4)    # li is now [1, 2, 3, 4] again.\n\n# Access a list like you would any array\nli[0]   # => 1\n# Look at the last element\nli[-1]  # => 4\n\n# Looking out of bounds is an IndexError\nli[4]  # Raises an IndexError\n\n# You can look at ranges with slice syntax.\n# (It\'s a closed/open range for you mathy types.)\nli[1:3]   # Return list from index 1 to 3 => [2, 3]\nli[2:]    # Return list starting from index 2 => [3, 4]\nli[:3]    # Return list from beginning until index 3  => [1, 2, 3]\nli[::2]   # Return list selecting elements with a step size of 2 => [1, 3]\nli[::-1]  # Return list in reverse order => [4, 3, 2, 1]\nli[-3:-1] # Negative indices work too => [2, 3]\nli[1:-1]  # => [2, 3]\nli[-3:3]  # => [2, 3]\nli[-3:]   # => [2, 3, 4]\nli[:-1]   # => [1, 2, 3]\n# Use any combination of these to make advanced slices\n# li[start:end:step] # start (inclusive), end (exclusive), step\n\n# Make a one layer deep copy using slices\nli[::]       # Return a copy of the whole list => [1, 2, 3, 4]\nli2 = li[:]  # => li2 = [1, 2, 3, 4] but (li2 is li) will result in false.\n\n# Remove arbitrary elements from a list with "del"\ndel li[2]  # li is now [1, 2, 3]\n\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1\nli.index(4)  # Raises a ValueError as 4 is not in the list\n\n# You can add lists\n# Note: values for li and for other_li are not modified.\nli + other_li  # => [1, 2, 3, 4, 5, 6]\n\n# Concatenate lists with "extend()"\nli.extend(other_li)  # Now li is [1, 2, 3, 4, 5, 6]\n\n# Check for existence in a list with "in"\n1 in li  # => True\n\n# Examine the length with "len()"\nlen(li)  # => 6\n\n\n# Tuples are like lists but are immutable.\ntup = (1, 2, 3)\ntup[0]      # => 1\ntup[0] = 3  # Raises a TypeError\n\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class \'int\'>\ntype((1,))  # => <class \'tuple\'>\ntype(())    # => <class \'tuple\'>\n\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]          # => (1, 2)\n2 in tup         # => True\n\n# You can unpack tuples (or lists) into variables\na, b, c = (1, 2, 3)  # a is now 1, b is now 2 and c is now 3\n# You can also do extended unpacking\n*a, b = (1, 2, 3, 4)  # a is now [1, 2, 3] and b is now 4\na, *b = (1, 2, 3, 4)  # a is now 1 and b is now [2, 3, 4]\na, *b, c = (1, 2, 3, 4)  # a is now 1, b is now [2, 3] and c is now 4\n# Tuples are created by default if you leave out the parentheses\nd, e, f = 4, 5, 6  # tuple 4, 5, 6 is unpacked into variables d, e and f\n# respectively such that d = 4, e = 5 and f = 6\n# Now look how easy it is to swap two values\ne, d = d, e  # d is now 5 and e is now 4\n\n\n# Dictionaries store mappings from keys to values\nempty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {"one": 1, "two": 2, "three": 3}\n\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: "123"}  # => Yield a TypeError: unhashable type: \'list\'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n\n# Look up values with []\nfilled_dict["one"]  # => 1\n\n# Get all keys as an iterable with "keys()". We need to wrap the call in list()\n# to turn it into a list. We\'ll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => ["three", "two", "one"] in Python <3.7\nlist(filled_dict.keys())  # => ["one", "two", "three"] in Python 3.7+\n\n\n# Get all values as an iterable with "values()". Once again we need to wrap it\n# in list() to get it out of the iterable. Note - Same as above regarding key\n# ordering.\nlist(filled_dict.values())  # => [3, 2, 1]  in Python <3.7\nlist(filled_dict.values())  # => [1, 2, 3] in Python 3.7+\n\n# Check for existence of keys in a dictionary with "in"\n"one" in filled_dict  # => True\n1 in filled_dict      # => False\n\n# Looking up a non-existing key is a KeyError\nfilled_dict["four"]  # KeyError\n\n# Use "get()" method to avoid the KeyError\nfilled_dict.get("one")      # => 1\nfilled_dict.get("four")     # => None\n# The get method supports a default argument when the value is missing\nfilled_dict.get("one", 4)   # => 1\nfilled_dict.get("four", 4)  # => 4\n\n# "setdefault()" inserts into a dictionary only if the given key isn\'t present\nfilled_dict.setdefault("five", 5)  # filled_dict["five"] is set to 5\nfilled_dict.setdefault("five", 6)  # filled_dict["five"] is still 5\n\n# Adding to a dictionary\nfilled_dict.update({"four":4})  # => {"one": 1, "two": 2, "three": 3, "four": 4}\nfilled_dict["four"] = 4         # another way to add to dict\n\n# Remove keys from a dictionary with del\ndel filled_dict["one"]  # Removes the key "one" from filled dict\n\n# From Python 3.5 you can also use the additional unpacking options\n{"a": 1, **{"b": 2}}  # => {\'a\': 1, \'b\': 2}\n{"a": 1, **{"a": 2}}  # => {\'a\': 2}\n\n\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: \'list\'\nvalid_set = {(1,), 1}\n\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False\n\n# Check if set on the left is a subset of set on the right\n{1, 2} <= {1, 2, 3}  # => True\n\n# Check for existence in a set with in\n2 in filled_set   # => True\n10 in filled_set  # => False\n\n# Make a one layer deep copy\nfilled_set = some_set.copy()  # filled_set is {1, 2, 3, 4, 5}\nfilled_set is some_set        # => False\n\n# Type Conversion Functions\nbool(0)                     # This function is used to convert a value to boolean: => False, => True\nbytes(\'hello\', \'utf-8\')     # This function is used to convert a string to bytes: => b\'hello\'\nint(3.5)                    # converts any data type into integer type: => 3\nfloat(3)                    # converts any data type into float type: => 3.0\nhex(255)                    # converts integers to hexadecimal: => \'0xff\'\noct(8)                      # converts integer to octal: => \'0o10\'\nstr(123)                    # Used to convert integer into a string: => \'123\'\nord(\'a\')                    # converts characters into integer: => 97\nchr(97)                     # This function is used to convert an integer to a character: => \'a\'\ncomplex(3,4)                # This function converts real numbers to complex(real,imag) number: => (3+4j)\nlist((1,2,3))               # This function is used to convert any data type to a list type: => [1,2,3]\ntuple([1,2,3])              # This function is used to convert to a tuple: => (1,2,3)\nset([1,2,2,3])              # This function returns the type after converting to set: => {1,2,3}\ndict([(\'a\',1),(\'b\',2)])     # This function is used to convert a tuple of order (key,value) into a dictionary: => {\'a\':1,\'b\':2}\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Binary Operations"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Binary literals start with 0b\n0b1010  # => 10\n# Hex literals start with 0x\n0x1A  # => 26\n# Octal literals start with 0o\n0o12  # => 10\n\na = 5       # Binary 0101\nb = 3       # Binary 0011\n# Bitwise AND\na & b       # => 1 (Binary 0001)\n# Bitwise OR\na | b       # => 7 (Binary 0111)\n# Bitwise XOR\na ^ b       # => 6 (Binary 0110)\n# Bitwise NOT\n~a          # => -6 (Binary ...11111010)\n# Left Shift\na << 1      # => 10 (Binary 1010)\n# Right Shift\na >> 1      # => 2 (Binary 0010)\n"})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Regular Expressions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import re\n\n# Match a pattern.\n# Raw string literal. The `r` prefix tells Python\n# to treat backslashes as literal characters and not as escape characters.\npattern = r"\\d+"\ntext = "There are 123 apples"\nmatch = re.search(pattern, text)\nif match:\n    print("Found:", match.group()) # => Found: 123\n\n# Find all matches\nall_matches = re.findall(pattern, text)\nprint("All matches:", all_matches) # => All matches: [\'123\']\n\n# Replace text\nnew_text = re.sub(pattern, "456", text)\nprint("Replaced text:", new_text) # => Replaced text: There are 456 apples\n\n# Split text\nsplit_text = re.split(r"\\s+", text)\nprint("Split text:", split_text) # => Split text: [\'There\', \'are\', \'123\', \'apples\']\n\n# Compile a regex for repeated use\ncompiled_pattern = re.compile(r"\\w+")\nwords = compiled_pattern.findall(text)\nprint("Words:", words) # => Words: [\'There\', \'are\', \'123\', \'apples\']\n\n# Regex flags\ncase_insensitive_pattern = re.compile(r"apples", re.IGNORECASE)\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Control Flow and Iterables"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Let\'s just make a variable\nsome_var = 5\n\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints "some_var is smaller than 10"\nif some_var > 10:\n    print("some_var is totally bigger than 10.")\nelif some_var < 10:    # This elif clause is optional.\n    print("some_var is smaller than 10.")\nelse:                  # This is optional too.\n    print("some_var is indeed 10.")\n\n# Match/Case  -  Introduced in Python 3.10\n# It compares a value against multiple patterns and executes the matching case block.\n\ncommand = "run"\n\nmatch command:\n    case "run":\n        print("The robot started to run \ud83c\udfc3\u200d\u2642\ufe0f")\n    case "speak" | "say_hi":  # multiple options (OR pattern)\n        print("The robot said hi \ud83d\udde3\ufe0f")\n    case code if command.isdigit():  # conditional\n        print(f"The robot execute code: {code}")\n    case _:  # _ is a wildcard that never fails (like default/else)\n        print("Invalid command \u274c")\n\n# Output: "the robot started to run \ud83c\udfc3\u200d\u2642\ufe0f"\n\n"""\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n"""\nfor animal in ["dog", "cat", "mouse"]:\n    # You can use format() to interpolate formatted strings\n    print("{} is a mammal".format(animal))\n\n"""\n"range(number)" returns an iterable of numbers\nfrom zero up to (but excluding) the given number\nprints:\n    0\n    1\n    2\n    3\n"""\nfor i in range(4):\n    print(i)\n\n"""\n"range(lower, upper)" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n"""\nfor i in range(4, 8):\n    print(i)\n\n"""\n"range(lower, upper, step)" returns an iterable of numbers\nfrom the lower number to the upper number, while incrementing\nby step. If step is not indicated, the default value is 1.\nprints:\n    4\n    6\n"""\nfor i in range(4, 8, 2):\n    print(i)\n\n"""\nLoop over a list to retrieve both the index and the value of each list item:\n    0 dog\n    1 cat\n    2 mouse\n"""\nanimals = ["dog", "cat", "mouse"]\nfor i, value in enumerate(animals):\n    print(i, value)\n\n"""\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n"""\nx = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n\n# Handle exceptions with a try/except block\ntry:\n\n    # Use "raise" to raise an error\n    raise IndexError("This is an index error")\nexcept IndexError as e:\n    pass                 # Refrain from this, provide a recovery (next example).\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be processed jointly.\nelse:                    # Optional clause to the try/except block. Must follow\n                        # all except blocks.\n    print("All good!")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print("We can clean up resources here")\n\n# Instead of try/finally to cleanup resources you can use a with statement\nwith open("myfile.txt") as f:\n    for line in f:\n        print(line)\n\n# Writing to a file\ncontents = {"aa": 12, "bb": 21}\n# Context Managers set up and automatically clean up resources for code blocks, commonly used with the `with` statement\nwith open("myfile1.txt", "w") as file:\n    file.write(str(contents))        # writes a string to a file\n\nimport json\nwith open("myfile2.txt", "w") as file:\n    file.write(json.dumps(contents))  # writes an object to a file\n\n# Reading from a file\nwith open("myfile1.txt") as file:\n    contents = file.read()           # reads a string from a file\nprint(contents)\n# print: {"aa": 12, "bb": 21}\n\nwith open("myfile2.txt", "r") as file:\n    contents = json.load(file)       # reads a json object from a file\nprint(contents)\n# print: {"aa": 12, "bb": 21}\n\n\n# Python offers a fundamental abstraction called the Iterable.\n# An iterable is an object that can be treated as a sequence.\n# The object returned by the range function, is an iterable.\n\nfilled_dict = {"one": 1, "two": 2, "three": 3}\nour_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys([\'one\', \'two\', \'three\']). This is an object\n                    # that implements our Iterable interface.\n\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)\n\n# Our iterator is an object that can remember the state as we traverse through\n# it. We get the next object with "next()".\nnext(our_iterator)  # => "one"\n\n# It maintains state as we iterate.\nnext(our_iterator)  # => "two"\nnext(our_iterator)  # => "three"\n\n# After the iterator has returned all of its data, it raises a\n# StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n\n# We can also loop over it, in fact, "for" does this implicitly!\nour_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n\n# You can grab all the elements of an iterable or iterator by call of list().\nlist(our_iterable)  # => Returns ["one", "two", "three"]\nlist(our_iterator)  # => Returns [] because state is saved\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Functions"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Use "def" to create new functions\ndef add(x, y):\n    print("x is {} and y is {}".format(x, y))\n    return x + y  # Return values with a return statement\n\n# Calling functions with parameters\nadd(5, 6)  # => prints out "x is 5 and y is 6" and returns 11\n\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n\n# Let\'s call it to see what happens\nkeyword_args(big="foot", loch="ness")  # => {"big": "foot", "loch": "ness"}\n\n\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n"""\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {"a": 3, "b": 4}\n"""\n\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand args (tuples) and use ** to expand kwargs (dictionaries).\nargs = (1, 2, 3, 4)\nkwargs = {"a": 3, "b": 4}\nall_the_args(*args)            # equivalent: all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent: all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent: all_the_args(1, 2, 3, 4, a=3, b=4)\n\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                # (Note: parenthesis have been excluded but can be included)\n\nx = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again the use of parenthesis is optional.\n\n# global scope\nx = 5\n\ndef set_x(num):\n    # local scope begins here\n    # local var x not the same as global var x\n    x = num    # => 43\n    print(x)   # => 43\n\ndef set_global_x(num):\n    # global indicates that particular var lives in the global scope\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\n\nset_x(43)\nset_global_x(6)\n"""\nprints:\n    43\n    5\n    6\n"""\n\n\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\n\nadd_10 = create_adder(10)\nadd_10(3)   # => 13\n\n# Closures in nested functions:\n# We can use the nonlocal keyword to work with variables in nested scope which shouldn\'t be declared in the inner functions.\ndef create_avg():\n    total = 0\n    count = 0\n    def avg(n):\n        nonlocal total, count\n        total += n\n        count += 1\n        return total/count\n    return avg\navg = create_avg()\navg(3)  # => 3.0\navg(5)  # (3+5)/2 => 4.0\navg(7)  # (8+7)/3 => 5.0\n\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))          # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\n\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n\n# We can use list comprehensions for nice maps and filters\n# List comprehension stores the output as a list (which itself may be nested).\n[add_10(i) for i in [1, 2, 3]]         # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5]  # => [6, 7]\n\n# You can construct set and dict comprehensions as well.\n{x for x in "abcddeef" if x not in "abc"}  # => {\'d\', \'e\', \'f\'}\n{x: x**2 for x in range(5)}  # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Modules"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# You can import modules\nimport math\nprint(math.sqrt(16))  # => 4.0\n\n# You can get specific functions from a module\nfrom math import ceil, floor\nprint(ceil(3.7))   # => 4\nprint(floor(3.7))  # => 3\n\n# You can import all functions from a module.\n# Warning: this is not recommended\nfrom math import *\n\n# You can shorten module names\nimport math as m\nmath.sqrt(16) == m.sqrt(16)  # => True\n\n# Python modules are just ordinary Python files. You\n# can write your own, and import them. The name of the\n# module is the same as the name of the file.\n\n# You can find out which functions and attributes\n# are defined in a module.\nimport math\ndir(math)\n\n# If you have a Python script named math.py in the same\n# folder as your current script, the file math.py will\n# be loaded instead of the built-in Python module.\n# This happens because the local folder has priority\n# over Python's built-in libraries.\n"})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Classes"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# We use the "class" statement to create a class\nclass Human:\n\n    # A class attribute. It is shared by all instances of this class\n    species = "H. sapiens"\n\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by Python but that live in user-controlled\n    # namespaces. Methods(or objects or attributes) like: __init__, __str__,\n    # __repr__ etc. are called special methods (or sometimes called dunder\n    # methods). You should not invent such names on your own.\n    def __init__(self, name):\n        # Assign the argument to the instance\'s name attribute\n        self.name = name\n\n        # Initialize property\n        self._age = 0   # the leading underscore indicates the "age" property is\n                        # intended to be used internally\n                        # do not rely on this to be enforced: it\'s a hint to other devs\n\n    # An instance method. All methods take "self" as the first argument\n    def say(self, msg):\n        print("{name}: {message}".format(name=self.name, message=msg))\n\n    # Another instance method\n    def sing(self):\n        return "yo... yo... microphone check... one two... one two..."\n\n    # A class method is shared among all instances\n    # They are called with the calling class as the first argument\n    @classmethod\n    def get_species(cls):\n        return cls.species\n\n    # A static method is called without a class or instance reference\n    @staticmethod\n    def grunt():\n        return "*grunt*"\n\n    # A property is just like a getter.\n    # It turns the method age() into a read-only attribute of the same name.\n    # There\'s no need to write trivial getters and setters in Python, though.\n    @property\n    def age(self):\n        return self._age\n\n    # This allows the property to be set\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    # This allows the property to be deleted\n    @age.deleter\n    def age(self):\n        del self._age\n\n\n# When a Python interpreter reads a source file it executes all its code.\n# This __name__ check makes sure this code block is only executed when this\n# module is the main program.\nif __name__ == "__main__":\n    # Instantiate a class\n    i = Human(name="Ian")\n    i.say("hi")                     # "Ian: hi"\n    j = Human("Joel")\n    j.say("hello")                  # "Joel: hello"\n    # i and j are instances of type Human; i.e., they are Human objects.\n\n    # Call our class method\n    i.say(i.get_species())          # "Ian: H. sapiens"\n    # Change the shared attribute\n    Human.species = "H. neanderthalensis"\n    i.say(i.get_species())          # => "Ian: H. neanderthalensis"\n    j.say(j.get_species())          # => "Joel: H. neanderthalensis"\n\n    # Call the static method\n    print(Human.grunt())            # => "*grunt*"\n\n    # Static methods can be called by instances too\n    print(i.grunt())                # => "*grunt*"\n\n    # Update the property for this instance\n    i.age = 42\n    # Get the property\n    i.say(i.age)                    # => "Ian: 42"\n    j.say(j.age)                    # => "Joel: 0"\n    # Delete the property\n    del i.age\n    # i.age                         # => this would raise an AttributeError\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Inheritance"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inheritance allows new child classes to be defined that inherit methods and\n# variables from their parent class.\n\n# Using the Human class defined above as the base or parent class, we can\n# define a child class, Superhero, which inherits variables like "species",\n# "name", and "age", as well as methods, like "sing" and "grunt"\n# from the Human class, but can also have its own unique properties.\n\n# To take advantage of modularization by file you could place the classes above\n# in their own files, say, human.py\n\n# To import functions from other files use the following format\n# from "filename-without-extension" import "function-or-class"\n\nfrom human import Human\n\n\n# Specify the parent class(es) as parameters to the class definition\nclass Superhero(Human):\n\n    # If the child class should inherit all of the parent\'s definitions without\n    # any modifications, you can just use the "pass" keyword (and nothing else)\n    # but in this case it is commented out to allow for a unique child class:\n    # pass\n\n    # Child classes can override their parents\' attributes\n    species = "Superhuman"\n\n    # Children automatically inherit their parent class\'s constructor including\n    # its arguments, but can also define additional arguments or definitions\n    # and override its methods such as the class constructor.\n    # This constructor inherits the "name" argument from the "Human" class and\n    # adds the "superpower" and "movie" arguments:\n    def __init__(self, name, movie=False,\n                superpowers=["super strength", "bulletproofing"]):\n\n        # add additional class attributes:\n        self.fictional = True\n        self.movie = movie\n        # be aware of mutable default values, since defaults are shared\n        self.superpowers = superpowers\n\n        # The "super" function lets you access the parent class\'s methods\n        # that are overridden by the child, in this case, the __init__ method.\n        # This calls the parent class constructor:\n        super().__init__(name)\n\n    # override the sing method\n    def sing(self):\n        return "Dun, dun, DUN!"\n\n    # add an additional instance method\n    def boast(self):\n        for power in self.superpowers:\n            print("I wield the power of {pow}!".format(pow=power))\n\n\nif __name__ == "__main__":\n    sup = Superhero(name="Tick")\n\n    # Instance type checks\n    if isinstance(sup, Human):\n        print("I am human")\n    if type(sup) is Superhero:\n        print("I am a superhero")\n\n    # Get the "Method Resolution Order" used by both getattr() and super()\n    # (the order in which classes are searched for an attribute or method)\n    # This attribute is dynamic and can be updated\n    print(Superhero.__mro__)    # => (<class \'__main__.Superhero\'>,\n                                # => <class \'human.Human\'>, <class \'object\'>)\n\n    # Calls parent method but uses its own class attribute\n    print(sup.get_species())    # => Superhuman\n\n    # Calls overridden method\n    print(sup.sing())           # => Dun, dun, DUN!\n\n    # Calls method from Human\n    sup.say("Spoon")            # => Tick: Spoon\n\n    # Call method that exists only in Superhero\n    sup.boast()                 # => I wield the power of super strength!\n                                # => I wield the power of bulletproofing!\n\n    # Inherited class attribute\n    sup.age = 31\n    print(sup.age)              # => 31\n\n    # Attribute that only exists within Superhero\n    print("Am I Oscar eligible? " + str(sup.movie))\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Multiple Inheritance"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Another class definition\n# bat.py\nclass Bat:\n\n    species = "Baty"\n\n    def __init__(self, can_fly=True):\n        self.fly = can_fly\n\n    # This class also has a say method\n    def say(self, msg):\n        msg = "... ... ..."\n        return msg\n\n    # And its own method as well\n    def sonar(self):\n        return "sonar"\n\n\nif __name__ == "__main__":\n    b = Bat()\n    print(b.say("hello"))\n    print(b.fly)\n\n\n# And yet another class definition that inherits from Superhero and Bat\n# superhero.py\nfrom superhero import Superhero\nfrom bat import Bat\n\n# Define Batman as a child that inherits from both Superhero and Bat\nclass Batman(Superhero, Bat):\n\n    def __init__(self, *args, **kwargs):\n        # Typically to inherit attributes you have to call super:\n        # super(Batman, self).__init__(*args, **kwargs)\n        # However we are dealing with multiple inheritance here, and super()\n        # only works with the next base class in the MRO list.\n        # So instead we explicitly call __init__ for all ancestors.\n        # The use of *args and **kwargs allows for a clean way to pass\n        # arguments, with each parent "peeling a layer of the onion".\n        Superhero.__init__(self, "anonymous", movie=True,\n                        superpowers=["Wealthy"], *args, **kwargs)\n        Bat.__init__(self, *args, can_fly=False, **kwargs)\n        # override the value for the name attribute\n        self.name = "Bat Man"\n\n    def sing(self):\n        return "batman!"\n\n\nif __name__ == "__main__":\n    sup = Batman()\n\n    # The Method Resolution Order\n    print(Batman.__mro__)     # => (<class \'__main__.Batman\'>,\n                            # => <class \'superhero.Superhero\'>,\n                            # => <class \'human.Human\'>,\n                            # => <class \'bat.Bat\'>, <class \'object\'>)\n\n    # Calls parent method but uses its own class attribute\n    print(sup.get_species())  # => Superhuman\n\n    # Calls overridden method\n    print(sup.sing())         # => nan nan nan nan nan batman!\n\n    # Calls method from Human, because inheritance order matters\n    sup.say("I agree")        # => Sad Affleck: I agree\n\n    # Call method that exists only in 2nd ancestor\n    print(sup.sonar())        # => ))) ... (((\n\n    # Inherited class attribute\n    sup.age = 100\n    print(sup.age)            # => 100\n\n    # Inherited attribute from 2nd ancestor whose default value was overridden.\n    print("Can I fly? " + str(sup.fly))  # => Can I fly? False\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Advanced"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Generators help you make lazy code.\ndef double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n\n# Generators are memory-efficient because they only load the data needed to\n# process the next value in the iterable. This allows them to perform\n# operations on otherwise prohibitively large value ranges.\n# NOTE: `range` replaces `xrange` in Python 3.\nfor i in double_numbers(range(1, 900000000)):  # `range` is a generator.\n    print(i)\n    if i >= 30:\n        break\n\n# Just as you can create a list comprehension, you can create generator\n# comprehensions as well.\nvalues = (-x for x in [1,2,3,4,5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n\n\n# Decorators are a form of syntactic sugar.\n# They make code easier to read while accomplishing clunky syntax.\n\n# Wrappers are one type of decorator.\n# They\'re really useful for adding logging to existing functions without needing to modify them.\n\ndef log_function(func):\n    def wrapper(*args, **kwargs):\n        print("Entering function", func.__name__)\n        result = func(*args, **kwargs)\n        print("Exiting function", func.__name__)\n        return result\n    return wrapper\n\n@log_function               # equivalent:\ndef my_function(x,y):       # def my_function(x,y):\n    """Adds two numbers together."""\n    return x+y              #   return x+y\n                            # my_function = log_function(my_function)\n# The decorator @log_function tells us as we begin reading the function definition\n# for my_function that this function will be wrapped with log_function.\n# When function definitions are long, it can be hard to parse the non-decorated\n# assignment at the end of the definition.\n\nmy_function(1,2)  # => "Entering function my_function"\n                # => "3"\n                # => "Exiting function my_function"\n\n# But there\'s a problem.\n# What happens if we try to get some information about my_function?\n\nprint(my_function.__name__)  # => \'wrapper\'\nprint(my_function.__doc__)  # => None (wrapper function has no docstring)\n\n# Because our decorator is equivalent to my_function = log_function(my_function)\n# we\'ve replaced information about my_function with information from wrapper\n\n# Fix this using functools\n\nfrom functools import wraps\n\ndef log_function(func):\n    @wraps(func)  # this ensures docstring, function name, arguments list, etc. are all copied\n                # to the wrapped function - instead of being replaced with wrapper\'s info\n    def wrapper(*args, **kwargs):\n        print("Entering function", func.__name__)\n        result = func(*args, **kwargs)\n        print("Exiting function", func.__name__)\n        return result\n    return wrapper\n\n@log_function\ndef my_function(x,y):\n    """Adds two numbers together."""\n    return x+y\n\nmy_function(1,2)  # => "Entering function my_function"\n                # => "3"\n                # => "Exiting function my_function"\n\nprint(my_function.__name__)  # => \'my_function\'\nprint(my_function.__doc__)  # => \'Adds two numbers together.\'\n'})})]})]}),(0,r.jsxs)(a.A,{value:"knowledge",label:"Knowledge",children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Built-in data types"}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Category"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Immutable"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{children:"Example"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"1",children:"Text"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"str"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"String of Unicode characters"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:'"Hello, World"'})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"3",children:"Numeric"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"int"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Integer (whole number)"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"42"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Floating-point number (decimal)"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"3.14"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"complex"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Complex number (real and imaginary parts)"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"1 + 2j"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"3",children:"Sequence"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"list"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"Ordered, mutable collection of items"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"[1, 2, 3]"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"tuple"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Ordered, immutable collection of items"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"(1, 2, 3)"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"range"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Immutable sequence of numbers (often used in loops)"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"range(0, 10)"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"1",children:"Mapping"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"dict"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"Unordered collection of key-value pairs"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:'{"key": "value"}'})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"2",children:"Set"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"set"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"Unordered collection of unique items"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"{1, 2, 3}"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"frozenset"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Immutable version of a set"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"frozenset([1, 2, 3])"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"1",children:"Boolean"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"bool"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Represents truth values"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(n.code,{children:"True"})," or ",(0,r.jsx)(n.code,{children:"False"})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"3",children:"Binary"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"bytes"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Immutable sequence of bytes"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:'b"Hello"'})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"bytearray"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"Mutable sequence of bytes"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:'bytearray(b"Hello")'})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"memoryview"})}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"Memory view object (allows access to the internal data of an object)"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:'memoryview(b"Hello")'})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{rowspan:"1",children:"None Type"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"NoneType"})}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"Represents the absence (NULL) of a value"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"None"})})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"List, Tuple, Set, Dictionary"}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Feature"}),(0,r.jsx)("th",{children:"List"}),(0,r.jsx)("th",{children:"Tuple"}),(0,r.jsx)("th",{children:"Set"}),(0,r.jsx)("th",{children:"Dictionary"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Syntax"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"[ ]"})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"( )"})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"{ }"})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"{key: value}"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Mutability"}),(0,r.jsx)("td",{children:"Mutable"}),(0,r.jsx)("td",{children:"Immutable"}),(0,r.jsx)("td",{children:"Mutable"}),(0,r.jsx)("td",{children:"Mutable"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Order"}),(0,r.jsx)("td",{children:"Ordered"}),(0,r.jsx)("td",{children:"Ordered"}),(0,r.jsx)("td",{children:"Unordered"}),(0,r.jsx)("td",{children:"Ordered (Python 3.7+)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Duplicate elements"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Not allowed"}),(0,r.jsx)("td",{children:"Keys unique, values allowed"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Indexing"}),(0,r.jsx)("td",{children:"Supports integer indexing"}),(0,r.jsx)("td",{children:"Supports integer indexing"}),(0,r.jsx)("td",{children:"No indexing"}),(0,r.jsx)("td",{children:"Key-based indexing"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Addition of elements"}),(0,r.jsx)("td",{children:"Yes, using append()/insert()"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"Yes, using add()"}),(0,r.jsx)("td",{children:"Yes, by key assignment"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Deletion of elements"}),(0,r.jsx)("td",{children:"Yes, using pop()/del"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"Yes, using pop()/remove()"}),(0,r.jsx)("td",{children:"Yes, by key"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:["Heterogeneous elements",(0,r.jsx)("br",{}),"(store elements of different data types)"]}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed (keys and values)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Nesting"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"}),(0,r.jsx)("td",{children:"Allowed"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Typical Use Case"}),(0,r.jsx)("td",{children:"Ordered collection, modifiable"}),(0,r.jsx)("td",{children:"Fixed collection, constant data"}),(0,r.jsx)("td",{children:"Unique collection, unordered"}),(0,r.jsx)("td",{children:"Key-value pairs, fast lookup"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Performance Notes"}),(0,r.jsx)("td",{children:"Slower than tuple for iteration"}),(0,r.jsx)("td",{children:"Faster than list, space efficient"}),(0,r.jsxs)("td",{children:["Fast for membership (",(0,r.jsx)(n.code,{children:"in"})," / ",(0,r.jsx)(n.code,{children:"not in"}),") checks"]}),(0,r.jsx)("td",{children:"Fast lookups via hashing"})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Shallow vs. Deep Copy"}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Shallow Copy"}),(0,r.jsx)("th",{children:"Deep Copy"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Definition"}),(0,r.jsx)("td",{children:"Creates a new object, but inserts references into it to the objects found in the original"}),(0,r.jsx)("td",{children:"Creates a new object and recursively adds copies of nested objects found in the original"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Use Case"}),(0,r.jsx)("td",{children:"When you want a new collection but are okay with shared references to nested objects"}),(0,r.jsx)("td",{children:"When you need a completely independent copy of an object and all its nested objects"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Implementation"}),(0,r.jsxs)("td",{children:["Using the ",(0,r.jsx)(n.code,{children:"copy"})," module's ",(0,r.jsx)(n.code,{children:"copy()"})," function or slicing for lists"]}),(0,r.jsxs)("td",{children:["Using the ",(0,r.jsx)(n.code,{children:"copy"})," module's ",(0,r.jsx)(n.code,{children:"deepcopy()"})," function"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Example"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from copy import copy\n\noriginal = [[1, 2, 3], [4, 5, 6]]\nshallow_copied = copy(original)\nshallow_copied[0][0] = 'X'\nprint(original)  # => [['X', 2, 3], [4, 5, 6]]\n"})})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from copy import deepcopy\n\noriginal = [[1, 2, 3], [4, 5, 6]]\ndeep_copied = deepcopy(original)\ndeep_copied[0][0] = 'X'\nprint(original)  # => [[1, 2, 3], [4, 5, 6]]\n"})})})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Monkey Patching"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Monkey patching is a technique to modify or extend code at runtime.\n# It is often used to change or extend the behavior of libraries or classes\n# without modifying their source code.\nclass A:\n    def method(self):\n        return "original method"\na = A()\nprint(a.method())  # => "original method"\n# Now we will monkey patch the method\ndef new_method(self):\n    return "patched method"\nA.method = new_method\nprint(a.method())  # => "patched method"\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Regular vs. Metaclasses"}),(0,r.jsxs)("table",{className:"text_vertical",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Regular Classes"}),(0,r.jsx)("th",{children:"Metaclasses"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Definition"}),(0,r.jsx)("td",{children:"Blueprints for creating instances (objects)"}),(0,r.jsx)("td",{children:"Classes that define how other classes are created (blueprints of classes)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Purpose"}),(0,r.jsx)("td",{children:"Define attributes and behaviors of instances"}),(0,r.jsx)("td",{children:"Define attributes and behaviors of classes themselves"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Instantiation"}),(0,r.jsx)("td",{children:"Creating instances (objects) of the class"}),(0,r.jsx)("td",{children:"Creating classes (which in turn create instances)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Default Metaclass"}),(0,r.jsx)("td",{children:"N/A (they are instances of metaclasses)"}),(0,r.jsxs)("td",{children:["The default metaclass is ",(0,r.jsx)("code",{children:"type"})," in Python, which creates all regular classes"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"How created"}),(0,r.jsxs)("td",{children:["Defined using the ",(0,r.jsx)("code",{children:"class"})," keyword"]}),(0,r.jsxs)("td",{children:["Usually created by subclassing ",(0,r.jsx)("code",{children:"type"})," and overriding methods"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Use Cases"}),(0,r.jsx)("td",{children:"Modeling real-world entities and data structures"}),(0,r.jsx)("td",{children:"Customizing or controlling class creation, enforcing constraints, injecting methods, creating frameworks"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Relationship"}),(0,r.jsx)("td",{children:"Classes are instances of metaclasses"}),(0,r.jsx)("td",{children:"Metaclasses are classes whose instances are classes"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Complexity"}),(0,r.jsx)("td",{children:"Basic OOP concept, broadly used"}),(0,r.jsx)("td",{children:"Advanced topic, used mainly for metaprogramming or framework development"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Example"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Dog:\n    def bark(self):\n        return "Woof!"\nmy_dog = Dog()\nprint(my_dog.bark())  # => "Woof!"\n'})})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Meta(type):\n    def __new__(cls, name, bases, attrs):\n        attrs[\'greet\'] = lambda self: "Hello from " + name\n        return super().__new__(cls, name, bases, attrs)\n\nclass Cat(metaclass=Meta):\n    pass\n\nmy_cat = Cat()\nprint(my_cat.greet())  # => "Hello from Cat"\n'})})})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Access Specifier"}),(0,r.jsxs)("table",{className:"text_vertical",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Public"}),(0,r.jsx)("th",{children:"Protected"}),(0,r.jsx)("th",{children:"Private"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Definition"}),(0,r.jsx)("td",{children:"Members are open and can be accessed from any part of the program without restriction"}),(0,r.jsx)("td",{children:"Members are meant to be accessed only within the class and its derived classes as a convention only"}),(0,r.jsx)("td",{children:"Members are restricted to the defining class and not accessible directly from outside or subclasses"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Naming Convention"}),(0,r.jsx)("td",{children:"No underscore prefix"}),(0,r.jsxs)("td",{children:["Single underscore prefix (",(0,r.jsx)(n.code,{children:"_name"}),")"]}),(0,r.jsxs)("td",{children:["Double underscore prefix (",(0,r.jsx)(n.code,{children:"__name"}),")"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Visibility"}),(0,r.jsx)("td",{children:"Accessible from anywhere (inside and outside the class)"}),(0,r.jsx)("td",{children:"Accessible within the class and subclasses, not outside"}),(0,r.jsx)("td",{children:"Accessible only inside the class where defined"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Example"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    def __init__(self):\n        self.public_var = "I am public"\nobj = MyClass()\nprint(obj.public_var)  # => "I am public"\n'})})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    def __init__(self):\n        self._protected_var = "I am protected"\nobj = MyClass()\nprint(obj._protected_var)\n# => "I am protected" (but should be treated as non-public)\n'})})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    def __init__(self):\n        self.__private_var = "I am private"\n    def get_private(self):\n        return self.__private_var\nobj = MyClass()\nprint(obj.get_private())  # => "I am private"\n# print(obj.__private_var)  # => AttributeError\n'})})})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Walrus Operator"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# The walrus operator (:=) allows assignment and return of a value in the same\n# expression. It is useful in situations where you want to both assign a value\n# to a variable and use that value in a condition or expression.\nnumbers = [1, 2, 3, 4, 5]\n\n# Example 1: Using walrus operator in a while loop\nif (n := len(numbers)) > 3:\n    print(f"List is too long ({n} elements, expected <= 3)")\n\n# Example 2: Using walrus operator in a list comprehension\nwhile (n := len(numbers)) > 0:\n    print(numbers.pop())\n'})})]}),(0,r.jsxs)(t,{children:[(0,r.jsxs)("summary",{children:[(0,r.jsx)(n.code,{children:"*args"})," vs. ",(0,r.jsx)(n.code,{children:"**kwargs"})]}),(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"*args"})}),(0,r.jsx)("th",{children:(0,r.jsx)(n.code,{children:"**kwargs"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Syntax"}),(0,r.jsxs)("td",{children:["A single asterisk ",(0,r.jsx)(n.code,{children:"*"})," before a parameter name"]}),(0,r.jsxs)("td",{children:["Double asterisks ",(0,r.jsx)(n.code,{children:"**"})," before a parameter name"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Parameter type"}),(0,r.jsx)("td",{children:"Collects extra positional arguments"}),(0,r.jsx)("td",{children:"Collects extra keyword (named) arguments"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Data type inside function"}),(0,r.jsx)("td",{children:"Tuple of positional arguments"}),(0,r.jsx)("td",{children:"Dictionary of keyword arguments (key-value pairs)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Usage scenario"}),(0,r.jsx)("td",{children:"When number of positional arguments is variable"}),(0,r.jsx)("td",{children:"When number of keyword arguments is variable"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Access"}),(0,r.jsx)("td",{children:"Iterate over tuple or access by index"}),(0,r.jsx)("td",{children:"Iterate over dictionary items (key-value)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Example of function definition"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"def func(*args):"})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"def func(**kwargs):"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Example input"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"func(1, 2, 3)"})}),(0,r.jsx)("td",{children:(0,r.jsx)(n.code,{children:"func(name='John', age=25)"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Use with keyword args"}),(0,r.jsx)("td",{children:"Does not handle keyword arguments"}),(0,r.jsx)("td",{children:"Handles only keyword arguments"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Ordering in function definition"}),(0,r.jsxs)("td",{children:["Must come before ",(0,r.jsx)(n.code,{children:"**kwargs"})]}),(0,r.jsxs)("td",{children:["Must come after ",(0,r.jsx)(n.code,{children:"*args"})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Common usage"}),(0,r.jsx)("td",{children:"When expecting multiple non-keyword parameters"}),(0,r.jsx)("td",{children:"When expecting multiple named parameters"})]})]})]})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Method Resolution Order (MRO)"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# MRO is the order in which base classes are searched when executing a method.\n# It is especially important in the context of multiple inheritance.\n# Python uses the C3 linearization algorithm to determine the MRO.\nclass A:\n    def method(self):\n        return \"Method from A\"\nclass B(A):\n    def method(self):\n        return \"Method from B\"\nclass C(A):\n    def method(self):\n        return \"Method from C\"\nclass D(B, C):\n    pass\nd = D()\nprint(d.method())  # => \"Method from B\"\nprint(D.__mro__)  # => (<class '__main__.D'>, <class '__main__.B'>,\n                  # => <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)\n"})})]}),(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Dunder (magic methods)"}),(0,r.jsxs)(n.p,{children:['Dunder ("Double Under (Underscores)") methods (or magic methods) in Python are special methods with double underscores used for internal operations. They allow custom classes to mimic built-in types, enabling operator overloading (like ',(0,r.jsx)(n.code,{children:"+"})," via ",(0,r.jsx)(n.code,{children:"__add__"}),") and integration with functions (like ",(0,r.jsx)(n.code,{children:"len()"})," via ",(0,r.jsx)(n.code,{children:"__len__"}),"). Python invokes them automatically for interactions with operators or built-ins."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common dunder methods:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__init__(self, ...)"}),": Initializes a new instance (constructor method)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__str__(self)"}),": Returns a human-readable string representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__repr__(self)"}),": Returns an official string representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__len__(self)"}),": Enables the use of len() on the object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__add__(self, other)"}),": Defines behavior for the + operator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__eq__(self, other)"}),": Defines behavior for the == operator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__getitem__(self, key)"}),": Enables indexing using square brackets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__setitem__(self, key, value)"}),": Enables item assignment"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How does it work?"})}),(0,r.jsxs)(n.p,{children:["Python doesn't require direct calls to these methods - they're invoked automatically by operations, operators, or built-in functions when appropriate. For instance, creating a new object from a class calls ",(0,r.jsx)(n.code,{children:"__init__"}),", and printing an object calls ",(0,r.jsx)(n.code,{children:"__str__"}),"."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Operator Overloading"}),": Customize how operators work with your objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration with Built-ins"}),": Make your objects compatible with built-in functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Behavior"}),": Define how your objects behave in various contexts"]}),"\n"]})]})]}),(0,r.jsx)(a.A,{value:"libraries",label:"Libraries",children:(0,r.jsxs)(o.A,{queryString:"secondary",children:[(0,r.jsxs)(a.A,{value:"numpy",label:"NumPy",attributes:{className:"tabs__vertical"},children:[(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Aspect"}),(0,r.jsx)("th",{children:"Python Lists"}),(0,r.jsx)("th",{children:"NumPy Arrays"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Storage Mechanism"})}),(0,r.jsx)("td",{children:"General-purpose, store various data types, items stored contiguously but list is array of references"}),(0,r.jsx)("td",{children:"Homogeneous (same type) data, elements in contiguous block of memory, more memory-efficient, faster access"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Underlying Optimizations"})}),(0,r.jsx)("td",{children:"Not specialized for numerical operations, slower, dynamic size"}),(0,r.jsx)("td",{children:"Optimized for numerical computations, vectorized operations, fixed size"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Performance Considerations"})}),(0,r.jsx)("td",{colspan:"2",children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Memory Efficiency: NumPy arrays more efficient for large datasets, no type info per element"}),(0,r.jsx)("li",{children:"Element-Wise Operations: NumPy faster, no loops"}),(0,r.jsx)("li",{children:"Size Flexibility: Lists dynamic, overhead; NumPy fixed, memory-friendly"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("b",{children:"Use in Machine Learning"})}),(0,r.jsx)("td",{children:"General data-handling, before converting to arrays"}),(0,r.jsx)("td",{children:"Foundational for numerical data, used by TensorFlow, scikit-learn"})]})]})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Essential for numerical computing, providing powerful array objects and\n# tools for mathematical operations, especially in scientific and\n# technical computing\n# Use Cases: Numerical simulations, data analysis, and mathematical modeling\n\nimport numpy as np\n\nnp_file = np.load('data.npy')                   # Load data from a .npy file\nnp.save('output.npy', np_file)                  # Save data to a .npy file\n\narr_asarray = np.asarray(arr1d)                 # Convert a list to a NumPy array: array([1, 2, 3, 4, 5])\narr_iter = np.fromiter(range(5), dtype=int)     # Create a NumPy array from an iterable: array([0, 1, 2, 3, 4])\narr1d = np.array([1, 2, 3, 4, 5])               # Create a 1D NumPy array\narr2d = np.array([[1, 2, 3], [4, 5, 6]])        # Create a 2D NumPy array (matrix)\n\n# Array operations\n\narr_add = arr1d + 10                    # Add 10 to each element: [11, 12, 13, 14, 15]\narr_sum = np.sum(arr1d)                 # Sum of all elements: 15\narr_dot = np.dot(arr1d, arr1d)          # Dot product of arr1d with itself: 55\narr_mean = np.mean(arr1d)               # Mean of the array: 3.0\narr_reshaped = arr2d.reshape(3, 2)      # Reshape 2D array to 3x2: [[1, 2], [3, 4], [5, 6]]\narr_transposed = arr2d.transpose()      # Transpose the 2D array: [[1, 4], [2, 5], [3, 6]]\narr_filtered = arr1d[arr1d > 2]         # Filter elements greater than 2: [3, 4, 5]\narr_sorted = np.sort(arr1d)             # Sort the array: [1, 2, 3, 4, 5]\narr_unique = np.unique(arr1d)           # Unique elements in the array: [1, 2, 3, 4, 5]\narr_random = np.random.rand(3, 3)       # Create a 3x3 array of random numbers: [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]\narr_zeros = np.zeros((2, 3))            # Create a 2x3 array of zeros: [[0, 0, 0], [0, 0, 0]]\narr_ones = np.ones((2, 4))              # Create a 2x4 array of ones: [[1, 1, 1, 1], [1, 1, 1, 1]]\narr_empty = np.empty((3, 2))            # Create a 3x2 empty array: uninitialized values\narr_range = np.arange(0, 10, 2)         # Create an array with values from 0 to 10 with step 2: [0, 2, 4, 6, 8]\narr_linspace = np.linspace(0, 1, 5)     # Create an array with 5 evenly spaced values between 0 and 1: [0.0, 0.25, 0.5, 0.75, 1.0]\narr_sqrt = np.sqrt(arr1d)               # Square root of each element: [1.0, 1.414, 1.732, 2.0, 2.236]\narr_power = np.power(arr1d, 3)          # Raise each element to the power of 3: [1, 8, 27, 64, 125]\narr_variance = np.var(arr1d)            # Variance of the array: 2.0\narr_std = np.std(arr1d)                 # Standard deviation of the array: 1.414\narr_min = np.min(arr1d)                 # Minimum element in the array: 1\narr_max = np.max(arr1d)                 # Maximum element in the array: 5\n"})})]}),(0,r.jsx)(a.A,{value:"pandas",label:"Pandas",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Powerful data manipulation and analysis library built on top of NumPy,\n# offering data structures like DataFrames for handling structured data.\n# Use Cases: Data cleaning, transformation, and analysis in data science and machine\n# learning workflows.\nimport pandas as pd\n\ndf_file = pd.read_csv('data.csv')                       # Read data from a CSV file\ndf_file.to_csv('output.csv', index=False)                    # Write DataFrame to a CSV file\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35], 'City': ['New York', 'Los Angeles', 'Chicago']})\ndf2 = pd.DataFrame({'Name': ['David', 'Eva'], 'Age': [28, 22], 'City': ['Miami', 'Seattle']})\n\nprint(df.head())                                        # Display the first few rows of the DataFrame\n#       Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\nprint(df.tail())                                        # Display the last few rows of the DataFrame\n#       Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\nprint(df.info())                                        # Get a summary of the DataFrame\n# <class 'pandas.core.frame.DataFrame'>\n# RangeIndex: 3 entries, 0 to 2\n# Data columns (total 3 columns):\n#  #   Column  Non-Null Count  Dtype\n# ---  ------  --------------  -----\n#  0   Name    3 non-null      object\n#  1   Age     3 non-null      int64\n#  2   City    3 non-null      object\n# dtypes: int64(1), object(2)\n# memory usage: 120.0+ bytes\n\nprint(df.describe())                                    # Get descriptive statistics for numerical columns\n#              Age\n# count   3.000000\n# mean   30.000000\n# std     5.000000\n# min    25.000000\n# 25%    27.500000\n# 50%    30.000000\n# 75%    32.500000\n# max    35.000000\n\nprint(df.shape)                                         # Get the dimensions of the DataFrame\n# (3, 3)\n\nprint(df.dtypes)                                        # Get the data types of each column\n# Name     object\n# Age      int64\n# City     object\n# dtype: object\n\nprint(df['Name'].unique())                              # Get unique values in the 'Name' column\n# ['Alice' 'Bob' 'Charlie']\n\nprint(df.isnull())                                      # Check for missing values in each column\n# Name    False\n# Age     False\n# City    False\n# dtype: bool\n\ndf.fillna(0, inplace=True)                              # Fill missing values with 0\n#       Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\ndf.dropna(inplace=True)                                 # Drop rows with any missing values\n#      Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\nprint(df.iloc[0])                                       # Access the first row by index\n# Name      Alice\n# Age          25\n# City    New York\n# Name: 0, dtype: object\n\ndf.sort_values('Age', inplace=True)                     # Sort DataFrame by 'Age' column\n#       Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\nprint(df['City'].value_counts())                        # Count occurrences of each unique value in 'City' column\n# New York       1\n# Los Angeles    1\n# Chicago        1\n# Name: City, dtype: int64\n\ngrouped = df.groupby('City').mean()                     # Group by 'City' and calculate mean of numerical columns\n#                   Age\n# City\n# Chicago          35.0\n# Los Angeles      30.0\n# New York         25.0\n\ndf['Age'] = df['Age'].apply(lambda x: x * 2)            # Apply a function to double the 'Age' values\n#       Name  Age         City\n# 0    Alice   50     New York\n# 1      Bob   60  Los Angeles\n# 2  Charlie   70      Chicago\n\nmerged_df = pd.merge(df, df2, on='Name', how='outer')   # Merge two DataFrames on 'Name' column\n#       Name  Age         City\n# 0    Alice   50     New York\n# 1      Bob   60  Los Angeles\n# 2  Charlie   70      Chicago\n# 3    David   28        Miami\n# 4      Eva   22      Seattle\n\nconcatenated_df = pd.concat([df, df2])                  # Concatenate two DataFrames\n#       Name  Age         City\n# 0    Alice   50     New York\n# 1      Bob   60  Los Angeles\n# 2  Charlie   70      Chicago\n# 0    David   28        Miami\n# 1      Eva   22      Seattle\n\ndf.rename(columns={'Name': 'Full Name'}, inplace=True)  # Rename 'Name' column to 'Full Name'\n#      Full Name  Age         City\n# 0    Alice      50     New York\n# 1      Bob      60  Los Angeles\n# 2  Charlie      70      Chicago\n# 3    David      28        Miami\n# 4      Eva      22      Seattle\n\ndf.drop('City', axis=1, inplace=True)                   # Drop the 'City' column\n#      Full Name  Age\n# 0    Alice      50\n# 1      Bob      60\n# 2  Charlie      70\n# 3    David      28\n# 4      Eva      22\n"})})}),(0,r.jsx)(a.A,{value:"matplotlib",label:"Matplotlib",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# A fundamental library for data visualization, enabling the creation of\n# static, animated, and interactive plots and charts.\n# Use Cases: Visualizing data trends, distributions, and relationships in scientific\n# computing and data analysis.\n\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\nplt.plot(x, y)                                                              # Plots a line graph between two variables\nplt.scatter(x, y)                                                           # Creates a scatter plot from two variables\nplt.bar(['A', 'B', 'C'], [5, 7, 3])                                         # Makes a bar chart for categorical data\nplt.hist([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], bins=4)                            # Creates a histogram for numerical data distribution\nplt.pie([10, 20, 30], labels=['X', 'Y', 'Z'])                               # Generates a pie chart representing category proportions\nplt.boxplot([[1, 2, 3], [2, 3, 4], [3, 4, 5]])                              # Draws a box plot to show data spread and outliers\nplt.imshow([[1, 2], [3, 4]])                                                # Displays image data as a plot\nplt.contour([[1, 2], [3, 4]])                                               # Makes contour plots for 3D surface-like data\nplt.errorbar(x, y, yerr=[0.5, 0.4, 0.3, 0.2, 0.1])                          # Plots error bars for observations with their uncertainties\nplt.stem(x, y)                                                              # Produces a stem plot for discrete sequences\nplt.fill(x, y)                                                              # Fills the area between two lines on a plot\nplt.plot_date(['2023-01-01', '2023-01-02', '2023-01-03'], y)                # Creates a line plot for time series data with dates\nplt.table(cellText=[[1, 2], [3, 4]], colLabels=['A', 'B'], loc='bottom')    # Adds a table to a plot beneath graphs for detailed data checks\nplt.text(2, 5, \"Sample Text\")                                               # Inserts text annotations into a plot\nplt.xlabel('X axis')                                                        # Sets label text for x axis\nplt.ylabel('Y axis')                                                        # Sets label text for y axis\nplt.title('Sample Plot')                                                    # Adds a title to the plot\nplt.legend(['Line', 'Scatter'])                                             # Displays legend to label elements on the plot\nplt.show()                                                                  # Displays the final rendered plot\nplt.savefig('plot.png')                                                     # Saves the plot as an image file\n\n"})})}),(0,r.jsx)(a.A,{value:"scikit-learn",label:"Scikit-learn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# A powerful and widely-used machine learning library for Python,\n# providing simple and efficient tools for data mining and data analysis.\n# Use Cases: Classification, regression, clustering, and dimensionality reduction tasks.\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.datasets import load_iris\n\n# Load dataset\ndata = load_iris()\n# Splits dataset into training and test sets for model validation\ntrX, X_test, trY, y_test = train_test_split(data.data, data.target, test_size=0.2, random_state=42)\n\n# Standardizes features by removing the mean and scaling to unit variance\nscaler = StandardScaler()\n# Fits the scaler on training data and transforms it\ntrX = scaler.fit_transform(trX)\n# Transforms test data using the fitted scaler\nX_test = scaler.transform(X_test)\n\n\n# An ensemble method to train random forest models, increasing accuracy over single trees\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\n# Trains/learns a model or transformer using training data\nmodel.fit(trX, trY)\n# Uses a trained model to predict target values for new or test data\ny_pred = model.predict(X_test)\n# Evaluates a model using cross-validation, returning consistency/stability metrics\ncross_val_score(model, data.data, data.target, cv=5)\n# Incrementally trains models (useful for large datasets)\nmodel.partial_fit(trX, trY, classes=[0, 1, 2])\n\n\n# Converts Python dictionaries to NumPy/SciPy arrays for feature extraction\nvec = DictVectorizer()\n# Fits and transforms data using the vectorizer\nvec.fit_transform(data.data)\n\n# An ensemble method to train random forest models, increasing accuracy over single trees\nclf = RandomForestClassifier(n_estimators=100)\n# Trains/learns a model or transformer using training data\nclf.fit(trX, trY)\n"})})})]})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);